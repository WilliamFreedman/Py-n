type token =
  | NEWLINE
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | DOT
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | LCURL
  | RCURL
  | COMMA
  | EXPONENT
  | FLOORDIVIDE
  | MOD
  | LSHIFT
  | RSHIFT
  | BITAND
  | BITOR
  | BITXOR
  | BITNOT
  | WALRUS
  | GT
  | LT
  | GEQ
  | LEQ
  | EQ
  | NEQ
  | ASSIGN
  | PLUSASSIGN
  | MINUSASSIGN
  | TIMESASSIGN
  | DIVIDEASSIGN
  | MODASSIGN
  | FLOORDIVASSIGN
  | EXPASSIGN
  | ANDASSIGN
  | ORASSIGN
  | XORASSIGN
  | RSHIFTASSIGN
  | LSHIFTASSIGN
  | DEDENT
  | OR
  | AND
  | FLOAT
  | BOOL
  | STR
  | INT
  | VOID
  | INDENT
  | NONE
  | FALSE
  | TRUE
  | CLASS
  | INTERFACE
  | FOR
  | WHILE
  | FROM
  | DEL
  | NOT
  | IS
  | IN
  | PASS
  | CONTINUE
  | BREAK
  | ELIF
  | ELSE
  | IF
  | RETURN
  | DEF
  | COLON
  | ARROW
  | LIST
  | DICT
  | IMPLEMENTS
  | EOF
  | BOOLLIT of (
# 15 "parser.mly"
        bool
# 83 "parser.ml"
)
  | INTLIT of (
# 16 "parser.mly"
        int
# 88 "parser.ml"
)
  | FLOATLIT of (
# 17 "parser.mly"
        float
# 93 "parser.ml"
)
  | STRINGLIT of (
# 18 "parser.mly"
        string
# 98 "parser.ml"
)
  | VARIABLE of (
# 20 "parser.mly"
        string
# 103 "parser.ml"
)

open Parsing
let _ = parse_error;;
# 2 "parser.mly"
open Ast
# 110 "parser.ml"
let yytransl_const = [|
  257 (* NEWLINE *);
  258 (* PLUS *);
  259 (* MINUS *);
  260 (* TIMES *);
  261 (* DIVIDE *);
  262 (* DOT *);
  263 (* LPAREN *);
  264 (* RPAREN *);
  265 (* LBRACK *);
  266 (* RBRACK *);
  267 (* LCURL *);
  268 (* RCURL *);
  269 (* COMMA *);
  270 (* EXPONENT *);
  271 (* FLOORDIVIDE *);
  272 (* MOD *);
  273 (* LSHIFT *);
  274 (* RSHIFT *);
  275 (* BITAND *);
  276 (* BITOR *);
  277 (* BITXOR *);
  278 (* BITNOT *);
  279 (* WALRUS *);
  280 (* GT *);
  281 (* LT *);
  282 (* GEQ *);
  283 (* LEQ *);
  284 (* EQ *);
  285 (* NEQ *);
  286 (* ASSIGN *);
  287 (* PLUSASSIGN *);
  288 (* MINUSASSIGN *);
  289 (* TIMESASSIGN *);
  290 (* DIVIDEASSIGN *);
  291 (* MODASSIGN *);
  292 (* FLOORDIVASSIGN *);
  293 (* EXPASSIGN *);
  294 (* ANDASSIGN *);
  295 (* ORASSIGN *);
  296 (* XORASSIGN *);
  297 (* RSHIFTASSIGN *);
  298 (* LSHIFTASSIGN *);
  299 (* DEDENT *);
  300 (* OR *);
  301 (* AND *);
  302 (* FLOAT *);
  303 (* BOOL *);
  304 (* STR *);
  305 (* INT *);
  306 (* VOID *);
  307 (* INDENT *);
  308 (* NONE *);
  309 (* FALSE *);
  310 (* TRUE *);
  311 (* CLASS *);
  312 (* INTERFACE *);
  313 (* FOR *);
  314 (* WHILE *);
  315 (* FROM *);
  316 (* DEL *);
  317 (* NOT *);
  318 (* IS *);
  319 (* IN *);
  320 (* PASS *);
  321 (* CONTINUE *);
  322 (* BREAK *);
  323 (* ELIF *);
  324 (* ELSE *);
  325 (* IF *);
  326 (* RETURN *);
  327 (* DEF *);
  328 (* COLON *);
  329 (* ARROW *);
  330 (* LIST *);
  331 (* DICT *);
  332 (* IMPLEMENTS *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  333 (* BOOLLIT *);
  334 (* INTLIT *);
  335 (* FLOATLIT *);
  336 (* STRINGLIT *);
  337 (* VARIABLE *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\004\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\011\000\012\000\005\000\017\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\018\000\018\000\018\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\021\000\010\000\
\019\000\019\000\024\000\024\000\025\000\025\000\023\000\022\000\
\022\000\022\000\020\000\020\000\026\000\027\000\027\000\027\000\
\028\000\008\000\015\000\007\000\013\000\013\000\030\000\030\000\
\030\000\029\000\029\000\029\000\031\000\009\000\032\000\032\000\
\032\000\033\000\014\000\014\000\034\000\034\000\034\000\000\000"

let yylen = "\002\000\
\002\000\000\000\003\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\002\000\005\000\001\000\001\000\001\000\
\001\000\001\000\001\000\004\000\006\000\001\000\003\000\004\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\004\000\004\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\001\000\004\000\004\000\
\001\000\001\000\007\000\009\000\013\000\015\000\003\000\000\000\
\001\000\003\000\001\000\001\000\003\000\000\000\001\000\003\000\
\003\000\007\000\008\000\007\000\007\000\009\000\000\000\001\000\
\003\000\000\000\001\000\003\000\007\000\006\000\000\000\001\000\
\003\000\003\000\008\000\007\000\008\000\007\000\006\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\011\000\010\000\
\009\000\000\000\000\000\000\000\000\000\112\000\000\000\000\000\
\005\000\006\000\007\000\008\000\012\000\013\000\014\000\015\000\
\016\000\017\000\018\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\046\000\047\000\048\000\000\000\030\000\
\000\000\000\000\000\000\052\000\070\000\073\000\074\000\084\000\
\083\000\000\000\000\000\000\000\000\000\001\000\004\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\
\023\000\025\000\022\000\026\000\000\000\000\000\027\000\000\000\
\003\000\031\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\069\000\000\000\000\000\079\000\000\000\085\000\000\000\000\000\
\000\000\000\000\066\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\072\000\032\000\000\000\000\000\000\000\000\000\000\000\000\000\
\082\000\000\000\000\000\000\000\088\000\053\000\000\000\071\000\
\054\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\097\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\106\000\000\000\105\000\028\000\
\000\000\102\000\093\000\000\000\092\000\000\000\000\000\000\000\
\000\000\000\000\090\000\000\000\101\000\000\000\000\000\100\000\
\091\000\075\000\000\000\000\000\000\000\000\000\107\000\029\000\
\094\000\000\000\000\000\000\000\000\000\076\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\111\000\077\000\000\000\000\000\000\000\109\000\078\000"

let yydgoto = "\002\000\
\014\000\015\000\016\000\056\000\017\000\018\000\019\000\020\000\
\021\000\022\000\023\000\024\000\025\000\026\000\027\000\115\000\
\112\000\042\000\043\000\044\000\045\000\080\000\046\000\047\000\
\048\000\049\000\082\000\083\000\197\000\134\000\029\000\164\000\
\165\000\231\000"

let yysindex = "\007\000\
\233\255\000\000\190\254\208\254\215\254\023\255\000\000\000\000\
\000\000\023\255\023\255\222\254\235\254\000\000\070\000\073\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\104\003\003\255\200\254\004\255\014\255\
\023\255\023\255\023\255\000\000\000\000\000\000\083\255\000\000\
\126\001\012\255\087\255\000\000\000\000\000\000\000\000\000\000\
\000\000\163\001\080\003\092\255\220\254\000\000\000\000\233\255\
\028\255\023\255\023\255\023\255\023\255\023\255\023\255\023\255\
\023\255\023\255\023\255\023\255\023\255\023\255\023\255\023\255\
\073\255\073\255\029\255\073\255\023\255\162\002\099\002\109\255\
\184\001\110\255\108\255\023\255\023\255\023\255\023\255\023\255\
\023\255\023\255\023\255\023\255\023\255\023\255\023\255\023\255\
\023\255\073\255\023\255\023\255\023\255\124\255\045\255\000\000\
\000\000\000\000\000\000\000\000\119\255\121\255\000\000\103\255\
\000\000\000\000\183\002\134\255\213\002\080\003\080\003\080\003\
\080\003\080\003\080\003\080\003\080\003\080\003\080\003\080\003\
\080\003\080\003\098\255\105\255\144\255\091\255\113\255\220\001\
\000\000\023\255\078\255\000\000\023\255\000\000\023\255\234\002\
\150\255\150\255\000\000\020\255\020\255\239\255\208\255\117\000\
\245\000\245\000\245\000\095\255\161\003\116\255\164\255\080\003\
\008\003\122\255\102\255\167\255\163\255\220\254\220\254\023\255\
\000\000\000\000\233\255\233\255\029\255\073\255\106\255\177\255\
\000\000\118\255\132\002\241\001\000\000\000\000\233\255\000\000\
\000\000\233\255\220\254\120\255\045\255\172\255\173\255\080\003\
\146\255\148\255\000\000\152\255\158\255\073\255\153\255\023\255\
\198\255\023\255\165\255\170\255\000\000\220\254\000\000\000\000\
\220\254\000\000\000\000\233\255\000\000\106\255\233\255\042\002\
\125\255\080\003\000\000\213\254\000\000\197\255\171\255\000\000\
\000\000\000\000\023\255\203\255\023\255\143\255\000\000\000\000\
\000\000\029\003\136\255\021\002\217\255\000\000\212\255\229\255\
\181\255\174\255\182\255\233\255\023\255\233\255\191\255\078\002\
\192\255\000\000\000\000\023\255\213\254\059\003\000\000\000\000"

let yyrindex = "\000\000\
\236\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\242\255\000\000\120\003\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\230\255\232\255\000\000\000\000\000\000\251\255\000\000\
\000\000\053\000\083\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\247\255\000\000\000\000\000\000\000\000\001\000\
\000\000\243\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\193\255\000\000\000\000\000\000\008\000\000\000\
\000\000\000\000\254\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\243\255\000\000\000\000\000\000\009\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\033\255\000\000\000\000\018\000\020\000\021\000\
\026\000\027\000\028\000\029\000\030\000\035\000\036\000\044\000\
\048\000\050\000\000\000\000\000\241\255\000\000\000\000\000\000\
\000\000\042\255\000\000\000\000\000\000\000\000\232\255\000\000\
\129\000\159\000\000\000\126\255\201\000\231\000\140\255\014\001\
\028\001\066\001\080\001\106\001\237\255\000\000\000\000\036\255\
\000\000\000\000\000\000\000\000\051\000\000\000\000\000\000\000\
\000\000\000\000\017\000\017\000\193\255\000\000\019\000\000\000\
\000\000\000\000\056\255\000\000\000\000\000\000\017\000\000\000\
\000\000\017\000\000\000\000\000\009\000\000\000\000\000\067\000\
\000\000\000\000\000\000\000\000\000\000\032\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\017\000\000\000\019\000\075\000\000\000\
\000\000\056\255\000\000\076\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\017\000\000\000\017\000\000\000\000\000\
\000\000\000\000\000\000\000\000\078\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\202\255\000\000\189\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\250\255\
\013\000\016\000\000\000\000\000\000\000\224\255\000\000\000\000\
\000\000\000\000\193\000\000\000\125\000\170\000\084\255\155\000\
\000\000\092\000"

let yytablesize = 1214
let yytable = "\041\000\
\002\000\113\000\198\000\050\000\051\000\131\000\132\000\001\000\
\135\000\104\000\105\000\106\000\107\000\108\000\030\000\074\000\
\028\000\057\000\099\000\075\000\059\000\085\000\086\000\229\000\
\230\000\116\000\078\000\079\000\081\000\033\000\158\000\034\000\
\031\000\035\000\100\000\087\000\068\000\109\000\110\000\032\000\
\081\000\198\000\081\000\068\000\111\000\068\000\052\000\068\000\
\068\000\080\000\053\000\080\000\117\000\118\000\119\000\120\000\
\121\000\122\000\123\000\124\000\125\000\126\000\127\000\128\000\
\129\000\130\000\159\000\089\000\089\000\054\000\136\000\028\000\
\114\000\055\000\073\000\076\000\077\000\144\000\145\000\146\000\
\147\000\148\000\149\000\150\000\151\000\152\000\153\000\154\000\
\155\000\156\000\157\000\084\000\068\000\160\000\161\000\101\000\
\085\000\086\000\103\000\036\000\037\000\038\000\039\000\040\000\
\068\000\177\000\196\000\068\000\040\000\133\000\087\000\088\000\
\089\000\090\000\091\000\092\000\193\000\194\000\140\000\093\000\
\143\000\142\000\094\000\095\000\162\000\163\000\064\000\166\000\
\203\000\167\000\214\000\204\000\168\000\064\000\179\000\064\000\
\180\000\064\000\064\000\097\000\063\000\169\000\064\000\064\000\
\064\000\064\000\064\000\063\000\171\000\063\000\064\000\063\000\
\063\000\064\000\064\000\172\000\173\000\223\000\178\000\063\000\
\225\000\192\000\174\000\175\000\063\000\087\000\183\000\063\000\
\063\000\064\000\064\000\184\000\186\000\187\000\188\000\189\000\
\012\000\199\000\190\000\191\000\200\000\208\000\064\000\063\000\
\063\000\209\000\028\000\028\000\210\000\247\000\211\000\249\000\
\206\000\216\000\064\000\218\000\063\000\064\000\028\000\205\000\
\213\000\028\000\212\000\215\000\217\000\228\000\232\000\219\000\
\063\000\085\000\086\000\063\000\220\000\233\000\237\000\235\000\
\239\000\241\000\221\000\242\000\234\000\222\000\236\000\087\000\
\088\000\089\000\090\000\028\000\092\000\243\000\028\000\244\000\
\246\000\250\000\253\000\002\000\245\000\060\000\248\000\080\000\
\085\000\086\000\019\000\086\000\060\000\254\000\060\000\020\000\
\060\000\060\000\080\000\049\000\049\000\049\000\087\000\088\000\
\089\000\002\000\049\000\028\000\049\000\028\000\049\000\049\000\
\095\000\087\000\049\000\049\000\049\000\049\000\049\000\049\000\
\103\000\081\000\033\000\049\000\034\000\035\000\049\000\049\000\
\060\000\060\000\036\000\038\000\040\000\039\000\037\000\003\000\
\004\000\005\000\006\000\041\000\042\000\060\000\049\000\049\000\
\007\000\008\000\009\000\002\000\043\000\010\000\011\000\012\000\
\044\000\060\000\045\000\049\000\060\000\050\000\050\000\050\000\
\096\000\013\000\104\000\002\000\050\000\098\000\050\000\049\000\
\050\000\050\000\049\000\021\000\050\000\050\000\050\000\050\000\
\050\000\050\000\099\000\002\000\108\000\050\000\110\000\181\000\
\050\000\050\000\224\000\051\000\051\000\051\000\195\000\207\000\
\255\000\000\000\051\000\000\000\051\000\000\000\051\000\051\000\
\050\000\050\000\051\000\051\000\051\000\051\000\051\000\051\000\
\000\000\000\000\000\000\051\000\000\000\050\000\051\000\051\000\
\000\000\000\000\000\000\000\000\000\000\000\000\085\000\086\000\
\000\000\050\000\000\000\000\000\050\000\000\000\051\000\051\000\
\000\000\055\000\055\000\055\000\087\000\088\000\089\000\090\000\
\055\000\000\000\055\000\051\000\055\000\055\000\000\000\000\000\
\000\000\055\000\055\000\055\000\055\000\055\000\000\000\051\000\
\000\000\055\000\051\000\000\000\055\000\055\000\000\000\056\000\
\056\000\056\000\000\000\000\000\000\000\000\000\056\000\000\000\
\056\000\000\000\056\000\056\000\055\000\055\000\000\000\056\000\
\056\000\056\000\056\000\056\000\000\000\000\000\000\000\056\000\
\000\000\055\000\056\000\056\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\055\000\000\000\000\000\
\055\000\065\000\056\000\056\000\000\000\000\000\000\000\000\000\
\065\000\000\000\065\000\000\000\065\000\065\000\000\000\056\000\
\000\000\065\000\065\000\065\000\065\000\065\000\000\000\000\000\
\000\000\065\000\000\000\056\000\065\000\065\000\056\000\062\000\
\000\000\000\000\000\000\000\000\000\000\000\000\062\000\000\000\
\062\000\000\000\062\000\062\000\065\000\065\000\085\000\086\000\
\000\000\062\000\062\000\062\000\000\000\000\000\000\000\062\000\
\000\000\065\000\062\000\062\000\087\000\088\000\089\000\090\000\
\091\000\092\000\000\000\000\000\000\000\065\000\067\000\000\000\
\065\000\000\000\062\000\062\000\000\000\067\000\000\000\067\000\
\000\000\067\000\067\000\000\000\059\000\000\000\000\000\062\000\
\000\000\067\000\067\000\059\000\000\000\059\000\067\000\059\000\
\059\000\067\000\067\000\062\000\000\000\000\000\062\000\000\000\
\000\000\000\000\000\000\000\000\059\000\000\000\000\000\059\000\
\059\000\067\000\067\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\057\000\000\000\000\000\000\000\067\000\059\000\
\059\000\057\000\000\000\057\000\000\000\057\000\057\000\000\000\
\058\000\000\000\067\000\000\000\059\000\067\000\000\000\058\000\
\000\000\058\000\057\000\058\000\058\000\057\000\057\000\000\000\
\059\000\000\000\000\000\059\000\000\000\000\000\000\000\000\000\
\058\000\000\000\061\000\058\000\058\000\057\000\057\000\000\000\
\000\000\061\000\000\000\061\000\000\000\061\000\061\000\000\000\
\000\000\000\000\057\000\058\000\058\000\000\000\000\000\085\000\
\086\000\000\000\000\000\000\000\000\000\000\000\057\000\000\000\
\058\000\057\000\000\000\000\000\000\000\087\000\088\000\089\000\
\090\000\091\000\092\000\000\000\058\000\061\000\093\000\058\000\
\000\000\094\000\095\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\061\000\000\000\085\000\086\000\000\000\000\000\
\000\000\096\000\097\000\000\000\000\000\000\000\061\000\000\000\
\000\000\061\000\087\000\088\000\089\000\090\000\091\000\092\000\
\000\000\085\000\086\000\093\000\000\000\000\000\094\000\095\000\
\000\000\000\000\000\000\000\000\000\000\098\000\000\000\087\000\
\088\000\089\000\090\000\091\000\092\000\000\000\096\000\097\000\
\093\000\000\000\000\000\094\000\095\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\085\000\086\000\000\000\
\000\000\000\000\000\000\096\000\097\000\000\000\000\000\000\000\
\000\000\000\000\102\000\087\000\088\000\089\000\090\000\091\000\
\092\000\000\000\085\000\086\000\093\000\000\000\000\000\094\000\
\095\000\000\000\000\000\000\000\000\000\000\000\000\000\141\000\
\087\000\088\000\089\000\090\000\091\000\092\000\000\000\096\000\
\097\000\093\000\000\000\000\000\094\000\095\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\085\000\086\000\
\000\000\000\000\000\000\000\000\096\000\097\000\000\000\000\000\
\000\000\000\000\000\000\176\000\087\000\088\000\089\000\090\000\
\091\000\092\000\000\000\085\000\086\000\093\000\000\000\000\000\
\094\000\095\000\000\000\226\000\000\000\000\000\000\000\000\000\
\202\000\087\000\088\000\089\000\090\000\091\000\092\000\000\000\
\096\000\097\000\093\000\000\000\000\000\094\000\095\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\085\000\
\086\000\000\000\000\000\000\000\000\000\096\000\097\000\000\000\
\000\000\251\000\000\000\000\000\240\000\087\000\088\000\089\000\
\090\000\091\000\092\000\000\000\085\000\086\000\093\000\000\000\
\000\000\094\000\095\000\000\000\000\000\000\000\227\000\138\000\
\000\000\000\000\087\000\088\000\089\000\090\000\091\000\092\000\
\000\000\096\000\097\000\093\000\000\000\000\000\094\000\095\000\
\000\000\000\000\000\000\000\000\000\000\085\000\086\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\096\000\097\000\
\000\000\000\000\252\000\087\000\088\000\089\000\090\000\091\000\
\092\000\000\000\000\000\139\000\093\000\000\000\000\000\094\000\
\095\000\000\000\000\000\085\000\086\000\000\000\000\000\000\000\
\000\000\137\000\000\000\000\000\000\000\000\000\000\000\096\000\
\097\000\087\000\088\000\089\000\090\000\091\000\092\000\000\000\
\085\000\086\000\093\000\000\000\201\000\094\000\095\000\000\000\
\000\000\000\000\000\000\138\000\000\000\000\000\087\000\088\000\
\089\000\090\000\091\000\092\000\000\000\096\000\097\000\093\000\
\000\000\000\000\094\000\095\000\000\000\000\000\085\000\086\000\
\000\000\000\000\000\000\000\000\000\000\000\000\170\000\000\000\
\000\000\000\000\096\000\097\000\087\000\088\000\089\000\090\000\
\091\000\092\000\000\000\085\000\086\000\093\000\000\000\000\000\
\094\000\095\000\000\000\182\000\000\000\000\000\000\000\000\000\
\000\000\087\000\088\000\089\000\090\000\091\000\092\000\000\000\
\096\000\097\000\093\000\000\000\000\000\094\000\095\000\000\000\
\000\000\085\000\086\000\000\000\000\000\000\000\000\000\000\000\
\000\000\185\000\000\000\000\000\000\000\096\000\097\000\087\000\
\088\000\089\000\090\000\091\000\092\000\000\000\085\000\086\000\
\093\000\000\000\000\000\094\000\095\000\000\000\238\000\000\000\
\000\000\000\000\000\000\000\000\087\000\088\000\089\000\090\000\
\091\000\092\000\000\000\096\000\097\000\093\000\000\000\000\000\
\094\000\095\000\000\000\000\000\085\000\086\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\
\096\000\097\000\087\000\088\000\089\000\090\000\091\000\092\000\
\000\000\085\000\086\000\093\000\000\000\000\000\094\000\095\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\087\000\
\088\000\089\000\090\000\091\000\092\000\000\000\096\000\097\000\
\093\000\000\000\000\000\094\000\095\000\057\000\058\000\000\000\
\059\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\096\000\097\000\030\000\030\000\000\000\
\030\000\000\000\000\000\000\000\000\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\070\000\
\071\000\072\000\000\000\000\000\000\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\085\000\086\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\087\000\088\000\089\000\090\000\091\000\092\000\000\000\000\000\
\000\000\093\000\000\000\000\000\094\000\095\000"

let yycheck = "\006\000\
\000\000\056\000\175\000\010\000\011\000\073\000\074\000\001\000\
\076\000\046\001\047\001\048\001\049\001\050\001\081\001\072\001\
\001\000\006\001\007\001\076\001\009\001\002\001\003\001\067\001\
\068\001\058\000\033\000\034\000\035\000\007\001\098\000\009\001\
\081\001\011\001\023\001\016\001\001\001\074\001\075\001\081\001\
\008\001\214\000\010\001\008\001\081\001\010\001\081\001\012\001\
\013\001\008\001\072\001\010\001\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\070\000\
\071\000\072\000\099\000\012\001\013\001\000\000\077\000\056\000\
\057\000\001\001\072\001\072\001\063\001\084\000\085\000\086\000\
\087\000\088\000\089\000\090\000\091\000\092\000\093\000\094\000\
\095\000\096\000\097\000\009\001\057\001\100\000\101\000\009\001\
\002\001\003\001\007\001\077\001\078\001\079\001\080\001\081\001\
\069\001\138\000\174\000\072\001\081\001\081\001\016\001\017\001\
\018\001\019\001\020\001\021\001\171\000\172\000\010\001\025\001\
\013\001\012\001\028\001\029\001\001\001\081\001\001\001\009\001\
\183\000\009\001\198\000\186\000\030\001\008\001\141\000\010\001\
\143\000\012\001\013\001\045\001\001\001\008\001\017\001\018\001\
\019\001\020\001\021\001\008\001\051\001\010\001\025\001\012\001\
\013\001\028\001\029\001\051\001\013\001\212\000\081\001\020\001\
\215\000\168\000\072\001\051\001\025\001\016\001\051\001\028\001\
\029\001\044\001\045\001\008\001\051\001\072\001\008\001\013\001\
\071\001\001\001\166\000\167\000\063\001\010\001\057\001\044\001\
\045\001\013\001\171\000\172\000\043\001\244\000\043\001\246\000\
\073\001\200\000\069\001\202\000\057\001\072\001\183\000\187\000\
\043\001\186\000\051\001\051\001\007\001\081\001\010\001\043\001\
\069\001\002\001\003\001\072\001\043\001\043\001\072\001\013\001\
\081\001\001\001\206\000\008\001\227\000\209\000\229\000\016\001\
\017\001\018\001\019\001\212\000\021\001\001\001\215\000\051\001\
\051\001\043\001\043\001\000\000\063\001\001\001\245\000\010\001\
\002\001\003\001\001\001\012\001\008\001\252\000\010\001\001\001\
\012\001\013\001\008\001\001\001\002\001\003\001\016\001\017\001\
\018\001\001\001\008\001\244\000\010\001\246\000\012\001\013\001\
\072\001\012\001\016\001\017\001\018\001\019\001\020\001\021\001\
\008\001\010\001\001\001\025\001\001\001\001\001\028\001\029\001\
\044\001\045\001\001\001\001\001\001\001\001\001\001\001\055\001\
\056\001\057\001\058\001\001\001\001\001\057\001\044\001\045\001\
\064\001\065\001\066\001\043\001\001\001\069\001\070\001\071\001\
\001\001\069\001\001\001\057\001\072\001\001\001\002\001\003\001\
\072\001\081\001\008\001\043\001\008\001\043\001\010\001\069\001\
\012\001\013\001\072\001\001\001\016\001\017\001\018\001\019\001\
\020\001\021\001\043\001\001\001\001\001\025\001\001\001\143\000\
\028\001\029\001\214\000\001\001\002\001\003\001\173\000\189\000\
\253\000\255\255\008\001\255\255\010\001\255\255\012\001\013\001\
\044\001\045\001\016\001\017\001\018\001\019\001\020\001\021\001\
\255\255\255\255\255\255\025\001\255\255\057\001\028\001\029\001\
\255\255\255\255\255\255\255\255\255\255\255\255\002\001\003\001\
\255\255\069\001\255\255\255\255\072\001\255\255\044\001\045\001\
\255\255\001\001\002\001\003\001\016\001\017\001\018\001\019\001\
\008\001\255\255\010\001\057\001\012\001\013\001\255\255\255\255\
\255\255\017\001\018\001\019\001\020\001\021\001\255\255\069\001\
\255\255\025\001\072\001\255\255\028\001\029\001\255\255\001\001\
\002\001\003\001\255\255\255\255\255\255\255\255\008\001\255\255\
\010\001\255\255\012\001\013\001\044\001\045\001\255\255\017\001\
\018\001\019\001\020\001\021\001\255\255\255\255\255\255\025\001\
\255\255\057\001\028\001\029\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\069\001\255\255\255\255\
\072\001\001\001\044\001\045\001\255\255\255\255\255\255\255\255\
\008\001\255\255\010\001\255\255\012\001\013\001\255\255\057\001\
\255\255\017\001\018\001\019\001\020\001\021\001\255\255\255\255\
\255\255\025\001\255\255\069\001\028\001\029\001\072\001\001\001\
\255\255\255\255\255\255\255\255\255\255\255\255\008\001\255\255\
\010\001\255\255\012\001\013\001\044\001\045\001\002\001\003\001\
\255\255\019\001\020\001\021\001\255\255\255\255\255\255\025\001\
\255\255\057\001\028\001\029\001\016\001\017\001\018\001\019\001\
\020\001\021\001\255\255\255\255\255\255\069\001\001\001\255\255\
\072\001\255\255\044\001\045\001\255\255\008\001\255\255\010\001\
\255\255\012\001\013\001\255\255\001\001\255\255\255\255\057\001\
\255\255\020\001\021\001\008\001\255\255\010\001\025\001\012\001\
\013\001\028\001\029\001\069\001\255\255\255\255\072\001\255\255\
\255\255\255\255\255\255\255\255\025\001\255\255\255\255\028\001\
\029\001\044\001\045\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\001\001\255\255\255\255\255\255\057\001\044\001\
\045\001\008\001\255\255\010\001\255\255\012\001\013\001\255\255\
\001\001\255\255\069\001\255\255\057\001\072\001\255\255\008\001\
\255\255\010\001\025\001\012\001\013\001\028\001\029\001\255\255\
\069\001\255\255\255\255\072\001\255\255\255\255\255\255\255\255\
\025\001\255\255\001\001\028\001\029\001\044\001\045\001\255\255\
\255\255\008\001\255\255\010\001\255\255\012\001\013\001\255\255\
\255\255\255\255\057\001\044\001\045\001\255\255\255\255\002\001\
\003\001\255\255\255\255\255\255\255\255\255\255\069\001\255\255\
\057\001\072\001\255\255\255\255\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\255\255\069\001\044\001\025\001\072\001\
\255\255\028\001\029\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\057\001\255\255\002\001\003\001\255\255\255\255\
\255\255\044\001\045\001\255\255\255\255\255\255\069\001\255\255\
\255\255\072\001\016\001\017\001\018\001\019\001\020\001\021\001\
\255\255\002\001\003\001\025\001\255\255\255\255\028\001\029\001\
\255\255\255\255\255\255\255\255\255\255\072\001\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\255\255\044\001\045\001\
\025\001\255\255\255\255\028\001\029\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\002\001\003\001\255\255\
\255\255\255\255\255\255\044\001\045\001\255\255\255\255\255\255\
\255\255\255\255\072\001\016\001\017\001\018\001\019\001\020\001\
\021\001\255\255\002\001\003\001\025\001\255\255\255\255\028\001\
\029\001\255\255\255\255\255\255\255\255\255\255\255\255\072\001\
\016\001\017\001\018\001\019\001\020\001\021\001\255\255\044\001\
\045\001\025\001\255\255\255\255\028\001\029\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\002\001\003\001\
\255\255\255\255\255\255\255\255\044\001\045\001\255\255\255\255\
\255\255\255\255\255\255\072\001\016\001\017\001\018\001\019\001\
\020\001\021\001\255\255\002\001\003\001\025\001\255\255\255\255\
\028\001\029\001\255\255\010\001\255\255\255\255\255\255\255\255\
\072\001\016\001\017\001\018\001\019\001\020\001\021\001\255\255\
\044\001\045\001\025\001\255\255\255\255\028\001\029\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\001\
\003\001\255\255\255\255\255\255\255\255\044\001\045\001\255\255\
\255\255\012\001\255\255\255\255\072\001\016\001\017\001\018\001\
\019\001\020\001\021\001\255\255\002\001\003\001\025\001\255\255\
\255\255\028\001\029\001\255\255\255\255\255\255\069\001\013\001\
\255\255\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\255\255\044\001\045\001\025\001\255\255\255\255\028\001\029\001\
\255\255\255\255\255\255\255\255\255\255\002\001\003\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\044\001\045\001\
\255\255\255\255\069\001\016\001\017\001\018\001\019\001\020\001\
\021\001\255\255\255\255\057\001\025\001\255\255\255\255\028\001\
\029\001\255\255\255\255\002\001\003\001\255\255\255\255\255\255\
\255\255\008\001\255\255\255\255\255\255\255\255\255\255\044\001\
\045\001\016\001\017\001\018\001\019\001\020\001\021\001\255\255\
\002\001\003\001\025\001\255\255\057\001\028\001\029\001\255\255\
\255\255\255\255\255\255\013\001\255\255\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\255\255\044\001\045\001\025\001\
\255\255\255\255\028\001\029\001\255\255\255\255\002\001\003\001\
\255\255\255\255\255\255\255\255\255\255\255\255\010\001\255\255\
\255\255\255\255\044\001\045\001\016\001\017\001\018\001\019\001\
\020\001\021\001\255\255\002\001\003\001\025\001\255\255\255\255\
\028\001\029\001\255\255\010\001\255\255\255\255\255\255\255\255\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001\255\255\
\044\001\045\001\025\001\255\255\255\255\028\001\029\001\255\255\
\255\255\002\001\003\001\255\255\255\255\255\255\255\255\255\255\
\255\255\010\001\255\255\255\255\255\255\044\001\045\001\016\001\
\017\001\018\001\019\001\020\001\021\001\255\255\002\001\003\001\
\025\001\255\255\255\255\028\001\029\001\255\255\010\001\255\255\
\255\255\255\255\255\255\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\255\255\044\001\045\001\025\001\255\255\255\255\
\028\001\029\001\255\255\255\255\002\001\003\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\012\001\255\255\
\044\001\045\001\016\001\017\001\018\001\019\001\020\001\021\001\
\255\255\002\001\003\001\025\001\255\255\255\255\028\001\029\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\255\255\044\001\045\001\
\025\001\255\255\255\255\028\001\029\001\006\001\007\001\255\255\
\009\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\044\001\045\001\006\001\007\001\255\255\
\009\001\255\255\255\255\255\255\255\255\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\255\255\255\255\255\255\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\002\001\003\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\255\255\255\255\
\255\255\025\001\255\255\255\255\028\001\029\001"

let yynames_const = "\
  NEWLINE\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  DOT\000\
  LPAREN\000\
  RPAREN\000\
  LBRACK\000\
  RBRACK\000\
  LCURL\000\
  RCURL\000\
  COMMA\000\
  EXPONENT\000\
  FLOORDIVIDE\000\
  MOD\000\
  LSHIFT\000\
  RSHIFT\000\
  BITAND\000\
  BITOR\000\
  BITXOR\000\
  BITNOT\000\
  WALRUS\000\
  GT\000\
  LT\000\
  GEQ\000\
  LEQ\000\
  EQ\000\
  NEQ\000\
  ASSIGN\000\
  PLUSASSIGN\000\
  MINUSASSIGN\000\
  TIMESASSIGN\000\
  DIVIDEASSIGN\000\
  MODASSIGN\000\
  FLOORDIVASSIGN\000\
  EXPASSIGN\000\
  ANDASSIGN\000\
  ORASSIGN\000\
  XORASSIGN\000\
  RSHIFTASSIGN\000\
  LSHIFTASSIGN\000\
  DEDENT\000\
  OR\000\
  AND\000\
  FLOAT\000\
  BOOL\000\
  STR\000\
  INT\000\
  VOID\000\
  INDENT\000\
  NONE\000\
  FALSE\000\
  TRUE\000\
  CLASS\000\
  INTERFACE\000\
  FOR\000\
  WHILE\000\
  FROM\000\
  DEL\000\
  NOT\000\
  IS\000\
  IN\000\
  PASS\000\
  CONTINUE\000\
  BREAK\000\
  ELIF\000\
  ELSE\000\
  IF\000\
  RETURN\000\
  DEF\000\
  COLON\000\
  ARROW\000\
  LIST\000\
  DICT\000\
  IMPLEMENTS\000\
  EOF\000\
  "

let yynames_block = "\
  BOOLLIT\000\
  INTLIT\000\
  FLOATLIT\000\
  STRINGLIT\000\
  VARIABLE\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'block_list) in
    Obj.repr(
# 46 "parser.mly"
                   ( { body = _1 } )
# 751 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 49 "parser.mly"
                                     ( []        )
# 757 "parser.ml"
               : 'block_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'block) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'newline_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'block_list) in
    Obj.repr(
# 50 "parser.mly"
                                     ( _1 :: _3  )
# 766 "parser.ml"
               : 'block_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 53 "parser.mly"
         ()
# 772 "parser.ml"
               : 'newline_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'declaration) in
    Obj.repr(
# 57 "parser.mly"
                            ( _1        )
# 779 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assignment) in
    Obj.repr(
# 58 "parser.mly"
                            ( _1        )
# 786 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'interface_definition) in
    Obj.repr(
# 59 "parser.mly"
                            ( _1        )
# 793 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'while_loop) in
    Obj.repr(
# 60 "parser.mly"
                            ( _1        )
# 800 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
                            ( Break     )
# 806 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
                            ( Continue  )
# 812 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "parser.mly"
                            ( Pass      )
# 818 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'function_definition) in
    Obj.repr(
# 64 "parser.mly"
                            ( _1        )
# 825 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'function_block_call) in
    Obj.repr(
# 65 "parser.mly"
                            ( _1        )
# 832 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'return_exit) in
    Obj.repr(
# 66 "parser.mly"
                            ( _1        )
# 839 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'return_val) in
    Obj.repr(
# 67 "parser.mly"
                            ( _1        )
# 846 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'class_definition) in
    Obj.repr(
# 68 "parser.mly"
                            ( _1        )
# 853 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'conditional) in
    Obj.repr(
# 69 "parser.mly"
                            ( _1        )
# 860 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'for_loop) in
    Obj.repr(
# 70 "parser.mly"
                            ( _1        )
# 867 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "parser.mly"
           ( ReturnVoid )
# 873 "parser.ml"
               : 'return_exit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 77 "parser.mly"
                ( ReturnVal(_2) )
# 880 "parser.ml"
               : 'return_val))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typename) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 80 "parser.mly"
                                        ( VarDec(_3, Var(_1), _5) )
# 889 "parser.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    Obj.repr(
# 84 "parser.mly"
                                                    ( TypeVariable("int")   )
# 895 "parser.ml"
               : 'typename))
; (fun __caml_parser_env ->
    Obj.repr(
# 85 "parser.mly"
                                                    ( TypeVariable("bool")  )
# 901 "parser.ml"
               : 'typename))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "parser.mly"
                                                    ( TypeVariable("float") )
# 907 "parser.ml"
               : 'typename))
; (fun __caml_parser_env ->
    Obj.repr(
# 87 "parser.mly"
                                                    ( TypeVariable("str")   )
# 913 "parser.ml"
               : 'typename))
; (fun __caml_parser_env ->
    Obj.repr(
# 88 "parser.mly"
                                                    ( TypeVariable("void")  )
# 919 "parser.ml"
               : 'typename))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 89 "parser.mly"
                                                    ( TypeVariable(_1)      )
# 926 "parser.ml"
               : 'typename))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typename) in
    Obj.repr(
# 90 "parser.mly"
                                                    ( List(_3)              )
# 933 "parser.ml"
               : 'typename))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'typename) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'typename) in
    Obj.repr(
# 91 "parser.mly"
                                                    ( Dict(_3, _5)          )
# 941 "parser.ml"
               : 'typename))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 95 "parser.mly"
                                    ( Var(_1)           )
# 948 "parser.ml"
               : 'variable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'variable) in
    Obj.repr(
# 96 "parser.mly"
                                    ( VarDot(_1, _3)    )
# 956 "parser.ml"
               : 'variable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                                    ( VarIndex(_1, _3)  )
# 964 "parser.ml"
               : 'variable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
                                    ( BlockAssign(_1, IdentityAssign, _3) )
# 972 "parser.ml"
               : 'assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 101 "parser.mly"
                                    ( BlockAssign(_1, PlusAssign,     _3) )
# 980 "parser.ml"
               : 'assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                                    ( BlockAssign(_1, MinusAssign,    _3) )
# 988 "parser.ml"
               : 'assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "parser.mly"
                                    ( BlockAssign(_1, TimesAssign,    _3) )
# 996 "parser.ml"
               : 'assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "parser.mly"
                                    ( BlockAssign(_1, ExpAssign,      _3) )
# 1004 "parser.ml"
               : 'assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                                    ( BlockAssign(_1, DivideAssign,   _3) )
# 1012 "parser.ml"
               : 'assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                                    ( BlockAssign(_1, FloorDivAssign, _3) )
# 1020 "parser.ml"
               : 'assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                                    ( BlockAssign(_1, ModAssign,      _3) )
# 1028 "parser.ml"
               : 'assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                                    ( BlockAssign(_1, AndAssign,      _3) )
# 1036 "parser.ml"
               : 'assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                                    ( BlockAssign(_1, OrAssign,       _3) )
# 1044 "parser.ml"
               : 'assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                                    ( BlockAssign(_1, XorAssign,      _3) )
# 1052 "parser.ml"
               : 'assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                                    ( BlockAssign(_1, RShiftAssign,   _3) )
# 1060 "parser.ml"
               : 'assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                                    ( BlockAssign(_1, LShiftAssign,   _3) )
# 1068 "parser.ml"
               : 'assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 115 "parser.mly"
                                    ( BoolLit(_1)                   )
# 1075 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 116 "parser.mly"
                                    ( IntLit(_1)                    )
# 1082 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 117 "parser.mly"
                                    ( FloatLit(_1)                  )
# 1089 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 118 "parser.mly"
                                    ( StringLit(_1)                 )
# 1096 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'variable) in
    Obj.repr(
# 119 "parser.mly"
                                    ( VarExpr(_1)                   )
# 1103 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'list) in
    Obj.repr(
# 120 "parser.mly"
                                    ( _1                            )
# 1110 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dict) in
    Obj.repr(
# 121 "parser.mly"
                                    ( _1                            )
# 1117 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                                    ( IndexingStringLit(_1, _3) 	)
# 1125 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                                    ( IndexingExprList(_1, _3) 		)
# 1133 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                                    ( Binop(_1, Add, _3)            )
# 1141 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                                    ( Binop(_1, Sub, _3)            )
# 1149 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                                    ( Binop(_1, Eq, _3)             )
# 1157 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                                    ( Binop(_1, Neq, _3)            )
# 1165 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                                    ( Binop(_1, Less, _3)           )
# 1173 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                                    ( Binop(_1, And, _3)            )
# 1181 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                                    ( Binop(_1, Or, _3)             )
# 1189 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
                                    ( Binop(_1, BitAnd, _3)         )
# 1197 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                                    ( Binop(_1, BitOr, _3)          )
# 1205 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 135 "parser.mly"
                                    ( Binop(_1, LShift, _3)         )
# 1213 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 136 "parser.mly"
                                    ( Binop(_1, RShift, _3)  	    )
# 1221 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 137 "parser.mly"
                                    ( Binop(_1, Mod, _3)            )
# 1229 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 138 "parser.mly"
                                    ( Binop(_1, Less, _3)           )
# 1237 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 139 "parser.mly"
                                    ( Walrus(_1, _3)                )
# 1245 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 140 "parser.mly"
                                    ( _2                            )
# 1252 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'function_call) in
    Obj.repr(
# 141 "parser.mly"
                                    ( _1                            )
# 1259 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'list_contents) in
    Obj.repr(
# 144 "parser.mly"
                                         ( FuncCall(_1, _3)      )
# 1267 "parser.ml"
               : 'function_call))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'list_contents) in
    Obj.repr(
# 147 "parser.mly"
                                         ( FuncBlockCall(_1, _3) )
# 1275 "parser.ml"
               : 'function_block_call))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'list_literal) in
    Obj.repr(
# 150 "parser.mly"
                         ( _1    )
# 1282 "parser.ml"
               : 'list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'list_comprehension) in
    Obj.repr(
# 151 "parser.mly"
                         ( _1    )
# 1289 "parser.ml"
               : 'list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 154 "parser.mly"
                                                     ( ListCompUnconditional(_2, Var(_4), _6)    )
# 1298 "parser.ml"
               : 'list_comprehension))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 155 "parser.mly"
                                                      ( ListCompConditional(_2, Var(_4), _6, _8)  )
# 1308 "parser.ml"
               : 'list_comprehension))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 11 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 9 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _9 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _12 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 158 "parser.mly"
                                                                                         ( DictCompUnconditional(_2, _4, Var(_7), Var(_9), _12)  )
# 1319 "parser.ml"
               : 'dict_comprehension))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 13 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 11 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _9 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _12 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _14 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 159 "parser.mly"
                                                                                          ( DictCompConditional(_2, _4, Var(_7), Var(_9), _12, _14)   )
# 1331 "parser.ml"
               : 'dict_comprehension))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'list_contents) in
    Obj.repr(
# 162 "parser.mly"
                             ( List(_2) )
# 1338 "parser.ml"
               : 'list_literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 165 "parser.mly"
                             ( []        )
# 1344 "parser.ml"
               : 'list_contents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 166 "parser.mly"
                             ( [_1]      )
# 1351 "parser.ml"
               : 'list_contents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'list_contents) in
    Obj.repr(
# 167 "parser.mly"
                             ( _1 :: _3  )
# 1359 "parser.ml"
               : 'list_contents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dict_literal) in
    Obj.repr(
# 170 "parser.mly"
                         ( _1    )
# 1366 "parser.ml"
               : 'dict))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dict_comprehension) in
    Obj.repr(
# 171 "parser.mly"
                         ( _1    )
# 1373 "parser.ml"
               : 'dict))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'dict_contents) in
    Obj.repr(
# 175 "parser.mly"
                             ( Dict(_2)    )
# 1380 "parser.ml"
               : 'dict_literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 178 "parser.mly"
                                     ( []        )
# 1386 "parser.ml"
               : 'dict_contents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dict_element) in
    Obj.repr(
# 179 "parser.mly"
                                     ( [_1]      )
# 1393 "parser.ml"
               : 'dict_contents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dict_element) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dict_contents) in
    Obj.repr(
# 180 "parser.mly"
                                     ( _1 :: _3  )
# 1401 "parser.ml"
               : 'dict_contents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 183 "parser.mly"
                         ( (_1, _3)  )
# 1409 "parser.ml"
               : 'dict_element))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'newline_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'block_list) in
    Obj.repr(
# 187 "parser.mly"
                                                         ( While(_2, _6) )
# 1418 "parser.ml"
               : 'while_loop))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'block_list) in
    Obj.repr(
# 190 "parser.mly"
                                                         ( For(Var(_2), _4, _8)  )
# 1427 "parser.ml"
               : 'for_loop))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'newline_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'func_signature_list) in
    Obj.repr(
# 193 "parser.mly"
                                                                             ( InterfaceDefinition(Var(_2), _6)  )
# 1436 "parser.ml"
               : 'interface_definition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'newline_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'block_list) in
    Obj.repr(
# 196 "parser.mly"
                                                                                         ( ClassDefinition(Var(_2), _6)                  )
# 1445 "parser.ml"
               : 'class_definition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'variable_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'newline_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'block_list) in
    Obj.repr(
# 197 "parser.mly"
                                                                                         ( ClassDefinitionImplements(Var(_2), _4, _8)    )
# 1455 "parser.ml"
               : 'class_definition))
; (fun __caml_parser_env ->
    Obj.repr(
# 201 "parser.mly"
                                 ( []            )
# 1461 "parser.ml"
               : 'variable_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 202 "parser.mly"
                                 ( [Var(_1)]     )
# 1468 "parser.ml"
               : 'variable_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'variable_list) in
    Obj.repr(
# 203 "parser.mly"
                                 ( Var(_1) :: _3 )
# 1476 "parser.ml"
               : 'variable_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 206 "parser.mly"
                                                     ( []        )
# 1482 "parser.ml"
               : 'func_signature_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'func_signature) in
    Obj.repr(
# 207 "parser.mly"
                                                     ( [_1]      )
# 1489 "parser.ml"
               : 'func_signature_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'func_signature) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'newline_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'func_signature_list) in
    Obj.repr(
# 208 "parser.mly"
                                                     ( _1 :: _3  )
# 1498 "parser.ml"
               : 'func_signature_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'args_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'typename) in
    Obj.repr(
# 211 "parser.mly"
                                                     ( (Var(_2), _4, _7) )
# 1507 "parser.ml"
               : 'func_signature))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'func_signature) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'newline_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'block_list) in
    Obj.repr(
# 214 "parser.mly"
                                                            ( FunctionDefinition(_1, _5) )
# 1516 "parser.ml"
               : 'function_definition))
; (fun __caml_parser_env ->
    Obj.repr(
# 217 "parser.mly"
                         ( []        )
# 1522 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arg) in
    Obj.repr(
# 218 "parser.mly"
                         ( [_1]      )
# 1529 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arg) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 219 "parser.mly"
                         ( _1 :: _3  )
# 1537 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typename) in
    Obj.repr(
# 222 "parser.mly"
                         ( (Var(_1), _3) )
# 1545 "parser.ml"
               : 'arg))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'block_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'elif) in
    Obj.repr(
# 225 "parser.mly"
                                                     ( IfNonEnd(_2, _6, _8)  )
# 1554 "parser.ml"
               : 'conditional))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'block_list) in
    Obj.repr(
# 226 "parser.mly"
                                                     ( IfEnd(_2, _6)         )
# 1562 "parser.ml"
               : 'conditional))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'block_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'elif) in
    Obj.repr(
# 229 "parser.mly"
                                                         ( ElifNonEnd(_2, _6, _8)    )
# 1571 "parser.ml"
               : 'elif))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'block_list) in
    Obj.repr(
# 230 "parser.mly"
                                                         ( ElifEnd(_2, _6)           )
# 1579 "parser.ml"
               : 'elif))
; (fun __caml_parser_env ->
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'block_list) in
    Obj.repr(
# 231 "parser.mly"
                                                         ( ElseEnd(_5)               )
# 1586 "parser.ml"
               : 'elif))
(* Entry program_rule *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program_rule (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
