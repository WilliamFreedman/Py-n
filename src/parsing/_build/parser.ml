type token =
  | NEWLINE
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | DOT
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | LCURL
  | RCURL
  | COMMA
  | EXPONENT
  | FLOORDIVIDE
  | MOD
  | LSHIFT
  | RSHIFT
  | BITAND
  | BITOR
  | BITXOR
  | BITNOT
  | WALRUS
  | GT
  | LT
  | GEQ
  | LEQ
  | EQ
  | NEQ
  | ASSIGN
  | PLUSASSIGN
  | MINUSASSIGN
  | TIMESASSIGN
  | DIVIDEASSIGN
  | MODASSIGN
  | FLOORDIVASSIGN
  | EXPASSIGN
  | ANDASSIGN
  | ORASSIGN
  | XORASSIGN
  | RSHIFTASSIGN
  | LSHIFTASSIGN
  | DEDENT
  | OR
  | AND
  | FLOAT
  | BOOL
  | STR
  | INT
  | VOID
  | INDENT
  | NONE
  | FALSE
  | TRUE
  | FOR
  | WHILE
  | FROM
  | DEL
  | NOT
  | IS
  | IN
  | PASS
  | CONTINUE
  | BREAK
  | ELIF
  | ELSE
  | IF
  | RETURN
  | DEF
  | COLON
  | ARROW
  | LIST
  | DICT
  | IMPLEMENTS
  | EOF
  | BOOLLIT of (bool)
  | INTLIT of (int)
  | FLOATLIT of (float)
  | STRINGLIT of (string)
  | VARIABLE of (string)

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Ast
# 88 "parser.ml"
let yytransl_const = [|
  257 (* NEWLINE *);
  258 (* PLUS *);
  259 (* MINUS *);
  260 (* TIMES *);
  261 (* DIVIDE *);
  262 (* DOT *);
  263 (* LPAREN *);
  264 (* RPAREN *);
  265 (* LBRACK *);
  266 (* RBRACK *);
  267 (* LCURL *);
  268 (* RCURL *);
  269 (* COMMA *);
  270 (* EXPONENT *);
  271 (* FLOORDIVIDE *);
  272 (* MOD *);
  273 (* LSHIFT *);
  274 (* RSHIFT *);
  275 (* BITAND *);
  276 (* BITOR *);
  277 (* BITXOR *);
  278 (* BITNOT *);
  279 (* WALRUS *);
  280 (* GT *);
  281 (* LT *);
  282 (* GEQ *);
  283 (* LEQ *);
  284 (* EQ *);
  285 (* NEQ *);
  286 (* ASSIGN *);
  287 (* PLUSASSIGN *);
  288 (* MINUSASSIGN *);
  289 (* TIMESASSIGN *);
  290 (* DIVIDEASSIGN *);
  291 (* MODASSIGN *);
  292 (* FLOORDIVASSIGN *);
  293 (* EXPASSIGN *);
  294 (* ANDASSIGN *);
  295 (* ORASSIGN *);
  296 (* XORASSIGN *);
  297 (* RSHIFTASSIGN *);
  298 (* LSHIFTASSIGN *);
  299 (* DEDENT *);
  300 (* OR *);
  301 (* AND *);
  302 (* FLOAT *);
  303 (* BOOL *);
  304 (* STR *);
  305 (* INT *);
  306 (* VOID *);
  307 (* INDENT *);
  308 (* NONE *);
  309 (* FALSE *);
  310 (* TRUE *);
  311 (* FOR *);
  312 (* WHILE *);
  313 (* FROM *);
  314 (* DEL *);
  315 (* NOT *);
  316 (* IS *);
  317 (* IN *);
  318 (* PASS *);
  319 (* CONTINUE *);
  320 (* BREAK *);
  321 (* ELIF *);
  322 (* ELSE *);
  323 (* IF *);
  324 (* RETURN *);
  325 (* DEF *);
  326 (* COLON *);
  327 (* ARROW *);
  328 (* LIST *);
  329 (* DICT *);
  330 (* IMPLEMENTS *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  331 (* BOOLLIT *);
  332 (* INTLIT *);
  333 (* FLOATLIT *);
  334 (* STRINGLIT *);
  335 (* VARIABLE *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\004\000\004\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\010\000\011\000\005\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\016\000\016\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\019\000\009\000\017\000\017\000\022\000\022\000\023\000\
\023\000\021\000\020\000\020\000\020\000\018\000\018\000\024\000\
\025\000\025\000\025\000\026\000\007\000\013\000\027\000\027\000\
\027\000\028\000\028\000\028\000\029\000\008\000\030\000\030\000\
\030\000\031\000\012\000\012\000\032\000\032\000\032\000\000\000"

let yylen = "\002\000\
\002\000\002\000\003\000\001\000\002\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\002\000\005\000\001\000\001\000\001\000\001\000\
\001\000\001\000\004\000\006\000\001\000\004\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\004\000\004\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\001\000\004\000\004\000\001\000\001\000\007\000\009\000\013\000\
\015\000\003\000\000\000\001\000\003\000\001\000\001\000\003\000\
\000\000\001\000\003\000\003\000\007\000\009\000\000\000\001\000\
\003\000\000\000\001\000\003\000\007\000\006\000\000\000\001\000\
\003\000\003\000\008\000\007\000\008\000\007\000\006\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\011\000\010\000\009\000\000\000\
\000\000\000\000\000\000\112\000\000\000\000\000\006\000\007\000\
\008\000\012\000\013\000\014\000\015\000\016\000\017\000\000\000\
\000\000\000\000\000\000\000\000\000\000\044\000\045\000\046\000\
\000\000\029\000\000\000\000\000\000\000\050\000\073\000\076\000\
\077\000\087\000\086\000\000\000\000\000\000\000\000\000\001\000\
\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\023\000\022\000\024\000\021\000\025\000\000\000\
\000\000\026\000\000\000\005\000\003\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\072\000\
\000\000\000\000\082\000\000\000\088\000\000\000\000\000\000\000\
\000\000\055\000\056\000\069\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\075\000\030\000\000\000\000\000\
\085\000\000\000\000\000\000\000\091\000\051\000\000\000\074\000\
\052\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\106\000\
\000\000\105\000\027\000\000\000\102\000\000\000\000\000\000\000\
\000\000\093\000\000\000\101\000\000\000\000\000\078\000\000\000\
\000\000\000\000\000\000\107\000\028\000\094\000\000\000\000\000\
\000\000\000\000\079\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\111\000\080\000\
\000\000\000\000\000\000\109\000\081\000"

let yydgoto = "\002\000\
\012\000\013\000\014\000\050\000\015\000\016\000\017\000\018\000\
\019\000\020\000\021\000\022\000\023\000\110\000\107\000\036\000\
\037\000\038\000\039\000\070\000\040\000\041\000\042\000\043\000\
\072\000\073\000\000\000\000\000\025\000\160\000\161\000\212\000"

let yysindex = "\002\000\
\028\000\000\000\186\254\029\255\000\000\000\000\000\000\029\255\
\029\255\195\254\206\254\000\000\026\000\027\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\179\004\
\220\254\232\254\029\255\029\255\029\255\000\000\000\000\000\000\
\030\255\000\000\133\002\255\254\038\255\000\000\000\000\000\000\
\000\000\000\000\000\000\163\002\148\004\036\255\069\255\000\000\
\000\000\034\255\029\255\029\255\029\255\029\255\029\255\029\255\
\029\255\029\255\029\255\029\255\029\255\029\255\029\255\029\255\
\029\255\027\255\029\255\194\003\118\003\057\255\193\002\056\255\
\080\255\029\255\029\255\029\255\029\255\029\255\029\255\029\255\
\029\255\029\255\029\255\029\255\029\255\029\255\029\255\029\255\
\029\255\029\255\029\255\029\255\027\255\029\255\029\255\029\255\
\068\255\016\255\000\000\000\000\000\000\000\000\000\000\085\255\
\091\255\000\000\084\255\000\000\000\000\224\003\112\255\254\003\
\148\004\148\004\148\004\148\004\148\004\148\004\148\004\148\004\
\148\004\148\004\148\004\148\004\148\004\014\255\223\002\000\000\
\029\255\042\255\000\000\029\255\000\000\029\255\028\004\026\255\
\026\255\000\000\000\000\000\000\107\255\107\255\136\000\018\000\
\190\000\130\000\130\000\130\000\130\000\130\000\130\000\178\004\
\000\005\015\255\114\255\148\004\058\004\074\255\059\255\118\255\
\120\255\069\255\069\255\029\255\000\000\000\000\028\000\130\255\
\000\000\076\255\162\003\253\002\000\000\000\000\028\000\000\000\
\000\000\028\000\069\255\072\255\016\255\134\255\127\255\148\004\
\106\255\099\255\029\255\146\255\029\255\108\255\115\255\000\000\
\069\255\000\000\000\000\069\255\000\000\028\000\058\003\087\255\
\148\004\000\000\223\254\000\000\149\255\124\255\000\000\029\255\
\161\255\029\255\105\255\000\000\000\000\000\000\088\004\097\255\
\027\003\176\255\000\000\170\255\179\255\135\255\131\255\140\255\
\028\000\029\255\028\000\151\255\088\003\152\255\000\000\000\000\
\029\255\223\254\118\004\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\196\255\000\000\215\004\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\188\255\189\255\000\000\000\000\000\000\
\239\255\000\000\000\000\044\000\100\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\199\255\000\000\000\000\000\000\
\000\000\001\000\194\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\193\255\000\000\000\000\000\000\
\195\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\194\255\000\000\000\000\
\000\000\197\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\004\255\000\000\000\000\
\207\255\208\255\211\255\212\255\214\255\215\255\216\255\217\255\
\219\255\220\255\222\255\223\255\224\255\000\000\000\000\000\000\
\009\255\000\000\000\000\000\000\000\000\189\255\000\000\144\255\
\156\000\000\000\000\000\000\000\212\000\012\001\064\001\160\001\
\112\001\208\001\216\001\008\002\016\002\064\002\072\002\218\255\
\204\000\000\000\000\000\126\255\000\000\000\000\000\000\000\000\
\225\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\033\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\197\255\000\000\000\000\231\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\033\255\000\000\233\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\234\255\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\213\255\000\000\192\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\252\255\104\255\012\000\
\000\000\000\000\000\000\226\255\000\000\000\000\000\000\000\000\
\093\000\000\000\000\000\000\000\000\000\055\000\000\000\004\000"

let yytablesize = 1565
let yytable = "\035\000\
\002\000\126\000\001\000\044\000\045\000\094\000\109\000\052\000\
\026\000\182\000\183\000\084\000\024\000\084\000\108\000\108\000\
\083\000\046\000\083\000\047\000\111\000\095\000\068\000\069\000\
\071\000\048\000\192\000\049\000\154\000\077\000\078\000\210\000\
\211\000\066\000\108\000\027\000\067\000\028\000\074\000\029\000\
\204\000\079\000\098\000\205\000\092\000\092\000\096\000\112\000\
\113\000\114\000\115\000\116\000\117\000\118\000\119\000\120\000\
\121\000\122\000\123\000\124\000\125\000\024\000\127\000\155\000\
\167\000\175\000\131\000\133\000\158\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\148\000\149\000\150\000\151\000\152\000\153\000\
\003\000\004\000\156\000\157\000\134\000\162\000\159\000\005\000\
\006\000\007\000\169\000\163\000\008\000\009\000\010\000\030\000\
\031\000\032\000\033\000\034\000\075\000\076\000\077\000\078\000\
\011\000\164\000\099\000\100\000\101\000\102\000\103\000\165\000\
\170\000\176\000\079\000\185\000\178\000\180\000\071\000\171\000\
\179\000\172\000\186\000\190\000\181\000\071\000\191\000\071\000\
\187\000\071\000\071\000\196\000\104\000\105\000\193\000\195\000\
\053\000\053\000\053\000\106\000\197\000\198\000\202\000\053\000\
\200\000\053\000\206\000\053\000\053\000\203\000\213\000\184\000\
\053\000\053\000\053\000\053\000\053\000\209\000\214\000\053\000\
\053\000\053\000\053\000\053\000\053\000\216\000\218\000\220\000\
\222\000\223\000\024\000\224\000\071\000\228\000\199\000\230\000\
\201\000\225\000\024\000\053\000\053\000\024\000\227\000\226\000\
\071\000\231\000\234\000\071\000\018\000\083\000\053\000\019\000\
\089\000\083\000\084\000\215\000\103\000\217\000\090\000\031\000\
\032\000\024\000\053\000\033\000\034\000\053\000\036\000\038\000\
\037\000\035\000\064\000\039\000\040\000\229\000\041\000\042\000\
\043\000\064\000\173\000\064\000\235\000\064\000\064\000\020\000\
\104\000\108\000\110\000\194\000\024\000\236\000\024\000\047\000\
\047\000\047\000\047\000\047\000\000\000\000\000\047\000\000\000\
\047\000\000\000\047\000\047\000\000\000\000\000\047\000\047\000\
\047\000\047\000\047\000\047\000\000\000\064\000\047\000\047\000\
\047\000\047\000\047\000\047\000\000\000\000\000\000\000\000\000\
\064\000\000\000\000\000\075\000\076\000\077\000\078\000\000\000\
\000\000\000\000\047\000\047\000\064\000\000\000\000\000\064\000\
\000\000\079\000\080\000\081\000\082\000\047\000\084\000\000\000\
\000\000\000\000\000\000\002\000\048\000\048\000\048\000\048\000\
\048\000\047\000\000\000\048\000\047\000\048\000\000\000\048\000\
\048\000\000\000\000\000\048\000\048\000\048\000\048\000\048\000\
\048\000\000\000\000\000\048\000\048\000\048\000\048\000\048\000\
\048\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\003\000\004\000\000\000\000\000\000\000\048\000\
\048\000\005\000\006\000\007\000\000\000\000\000\008\000\009\000\
\010\000\000\000\048\000\000\000\049\000\049\000\049\000\049\000\
\049\000\000\000\011\000\049\000\000\000\049\000\048\000\049\000\
\049\000\048\000\000\000\049\000\049\000\049\000\049\000\049\000\
\049\000\000\000\000\000\049\000\049\000\049\000\049\000\049\000\
\049\000\000\000\000\000\075\000\076\000\077\000\078\000\000\000\
\000\000\075\000\076\000\077\000\078\000\000\000\000\000\049\000\
\049\000\079\000\080\000\081\000\082\000\083\000\084\000\079\000\
\080\000\081\000\049\000\000\000\054\000\054\000\054\000\000\000\
\000\000\000\000\000\000\054\000\000\000\054\000\049\000\054\000\
\054\000\049\000\000\000\000\000\054\000\054\000\054\000\054\000\
\054\000\000\000\000\000\054\000\054\000\054\000\054\000\054\000\
\054\000\000\000\000\000\000\000\000\000\000\000\000\000\075\000\
\076\000\077\000\078\000\000\000\000\000\000\000\000\000\054\000\
\054\000\000\000\000\000\000\000\063\000\079\000\080\000\081\000\
\082\000\000\000\054\000\063\000\067\000\063\000\000\000\063\000\
\063\000\000\000\000\000\067\000\000\000\067\000\054\000\067\000\
\067\000\054\000\000\000\000\000\067\000\067\000\067\000\067\000\
\067\000\000\000\000\000\067\000\067\000\067\000\067\000\067\000\
\067\000\000\000\000\000\000\000\000\000\000\000\000\000\063\000\
\063\000\000\000\000\000\000\000\000\000\000\000\000\000\067\000\
\067\000\000\000\063\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\067\000\000\000\068\000\000\000\063\000\000\000\
\000\000\063\000\000\000\068\000\000\000\068\000\067\000\068\000\
\068\000\067\000\000\000\000\000\068\000\068\000\068\000\068\000\
\068\000\000\000\000\000\068\000\068\000\068\000\068\000\068\000\
\068\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\068\000\
\068\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\065\000\000\000\068\000\000\000\000\000\000\000\000\000\065\000\
\000\000\065\000\000\000\065\000\065\000\000\000\068\000\000\000\
\000\000\068\000\065\000\065\000\065\000\000\000\000\000\065\000\
\065\000\065\000\065\000\065\000\065\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\065\000\065\000\000\000\000\000\000\000\
\070\000\000\000\000\000\000\000\000\000\000\000\065\000\070\000\
\000\000\070\000\000\000\070\000\070\000\000\000\000\000\000\000\
\000\000\000\000\065\000\070\000\070\000\065\000\000\000\070\000\
\070\000\070\000\070\000\070\000\070\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\070\000\070\000\000\000\000\000\000\000\
\066\000\000\000\000\000\000\000\000\000\000\000\070\000\066\000\
\000\000\066\000\000\000\066\000\066\000\000\000\000\000\000\000\
\000\000\000\000\070\000\066\000\000\000\070\000\000\000\066\000\
\066\000\066\000\066\000\066\000\066\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\066\000\066\000\000\000\000\000\000\000\
\061\000\000\000\000\000\000\000\000\000\000\000\066\000\061\000\
\062\000\061\000\000\000\061\000\061\000\000\000\000\000\062\000\
\000\000\062\000\066\000\062\000\062\000\066\000\000\000\061\000\
\061\000\061\000\061\000\061\000\061\000\000\000\000\000\062\000\
\062\000\062\000\062\000\062\000\062\000\000\000\000\000\000\000\
\000\000\000\000\000\000\061\000\061\000\000\000\000\000\000\000\
\000\000\000\000\000\000\062\000\062\000\000\000\061\000\000\000\
\059\000\000\000\000\000\000\000\000\000\000\000\062\000\059\000\
\060\000\059\000\061\000\059\000\059\000\061\000\000\000\060\000\
\000\000\060\000\062\000\060\000\060\000\062\000\000\000\059\000\
\059\000\059\000\059\000\059\000\059\000\000\000\000\000\060\000\
\060\000\060\000\060\000\060\000\060\000\000\000\000\000\000\000\
\000\000\000\000\000\000\059\000\059\000\000\000\000\000\000\000\
\000\000\000\000\000\000\060\000\060\000\000\000\059\000\000\000\
\057\000\000\000\000\000\000\000\000\000\000\000\060\000\057\000\
\058\000\057\000\059\000\057\000\057\000\059\000\000\000\058\000\
\000\000\058\000\060\000\058\000\058\000\060\000\000\000\057\000\
\057\000\057\000\057\000\057\000\057\000\000\000\000\000\058\000\
\058\000\058\000\058\000\058\000\058\000\000\000\000\000\000\000\
\000\000\000\000\000\000\057\000\057\000\000\000\000\000\000\000\
\000\000\000\000\000\000\058\000\058\000\000\000\057\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\058\000\000\000\
\000\000\000\000\057\000\000\000\000\000\057\000\075\000\076\000\
\077\000\078\000\058\000\000\000\000\000\058\000\000\000\000\000\
\000\000\000\000\000\000\000\000\079\000\080\000\081\000\082\000\
\083\000\084\000\000\000\000\000\085\000\086\000\087\000\088\000\
\089\000\090\000\000\000\000\000\075\000\076\000\077\000\078\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\091\000\092\000\079\000\080\000\081\000\082\000\083\000\084\000\
\000\000\000\000\085\000\086\000\087\000\088\000\089\000\090\000\
\000\000\000\000\075\000\076\000\077\000\078\000\000\000\000\000\
\000\000\000\000\093\000\000\000\000\000\000\000\091\000\092\000\
\079\000\080\000\081\000\082\000\083\000\084\000\000\000\000\000\
\085\000\086\000\087\000\088\000\089\000\090\000\000\000\000\000\
\075\000\076\000\077\000\078\000\000\000\000\000\000\000\000\000\
\097\000\000\000\000\000\000\000\091\000\092\000\079\000\080\000\
\081\000\082\000\083\000\084\000\000\000\000\000\085\000\086\000\
\087\000\088\000\089\000\090\000\000\000\000\000\075\000\076\000\
\077\000\078\000\000\000\000\000\000\000\000\000\132\000\000\000\
\000\000\000\000\091\000\092\000\079\000\080\000\081\000\082\000\
\083\000\084\000\000\000\000\000\085\000\086\000\087\000\088\000\
\089\000\090\000\000\000\000\000\075\000\076\000\077\000\078\000\
\000\000\000\000\000\000\000\000\168\000\000\000\000\000\000\000\
\091\000\092\000\079\000\080\000\081\000\082\000\083\000\084\000\
\000\000\000\000\085\000\086\000\087\000\088\000\089\000\090\000\
\000\000\000\000\000\000\075\000\076\000\077\000\078\000\000\000\
\000\000\000\000\189\000\207\000\000\000\000\000\091\000\092\000\
\000\000\079\000\080\000\081\000\082\000\083\000\084\000\000\000\
\000\000\085\000\086\000\087\000\088\000\089\000\090\000\000\000\
\000\000\075\000\076\000\077\000\078\000\000\000\000\000\000\000\
\221\000\000\000\000\000\232\000\000\000\091\000\092\000\079\000\
\080\000\081\000\082\000\083\000\084\000\000\000\000\000\085\000\
\086\000\087\000\088\000\089\000\090\000\000\000\000\000\075\000\
\076\000\077\000\078\000\000\000\208\000\000\000\000\000\000\000\
\000\000\000\000\129\000\091\000\092\000\079\000\080\000\081\000\
\082\000\083\000\084\000\000\000\000\000\085\000\086\000\087\000\
\088\000\089\000\090\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\233\000\000\000\000\000\000\000\000\000\000\000\
\000\000\091\000\092\000\075\000\076\000\077\000\078\000\000\000\
\000\000\000\000\000\000\000\000\130\000\000\000\000\000\000\000\
\000\000\079\000\080\000\081\000\082\000\083\000\084\000\000\000\
\000\000\085\000\086\000\087\000\088\000\089\000\090\000\000\000\
\000\000\000\000\000\000\075\000\076\000\077\000\078\000\000\000\
\000\000\128\000\000\000\000\000\000\000\091\000\092\000\000\000\
\000\000\079\000\080\000\081\000\082\000\083\000\084\000\000\000\
\188\000\085\000\086\000\087\000\088\000\089\000\090\000\000\000\
\000\000\075\000\076\000\077\000\078\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\129\000\091\000\092\000\079\000\
\080\000\081\000\082\000\083\000\084\000\000\000\000\000\085\000\
\086\000\087\000\088\000\089\000\090\000\000\000\000\000\075\000\
\076\000\077\000\078\000\000\000\000\000\000\000\000\000\166\000\
\000\000\000\000\000\000\091\000\092\000\079\000\080\000\081\000\
\082\000\083\000\084\000\000\000\000\000\085\000\086\000\087\000\
\088\000\089\000\090\000\000\000\000\000\075\000\076\000\077\000\
\078\000\000\000\000\000\000\000\000\000\174\000\000\000\000\000\
\000\000\091\000\092\000\079\000\080\000\081\000\082\000\083\000\
\084\000\000\000\000\000\085\000\086\000\087\000\088\000\089\000\
\090\000\000\000\000\000\075\000\076\000\077\000\078\000\000\000\
\000\000\000\000\000\000\177\000\000\000\000\000\000\000\091\000\
\092\000\079\000\080\000\081\000\082\000\083\000\084\000\000\000\
\000\000\085\000\086\000\087\000\088\000\089\000\090\000\000\000\
\000\000\075\000\076\000\077\000\078\000\000\000\000\000\000\000\
\000\000\219\000\000\000\000\000\000\000\091\000\092\000\079\000\
\080\000\081\000\082\000\083\000\084\000\000\000\000\000\085\000\
\086\000\087\000\088\000\089\000\090\000\000\000\000\000\075\000\
\076\000\077\000\078\000\000\000\000\000\000\000\000\000\000\000\
\000\000\237\000\000\000\091\000\092\000\079\000\080\000\081\000\
\082\000\083\000\084\000\000\000\000\000\085\000\086\000\087\000\
\088\000\089\000\090\000\000\000\000\000\075\000\076\000\077\000\
\078\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\091\000\092\000\079\000\080\000\081\000\082\000\083\000\
\084\000\000\000\000\000\085\000\086\000\087\000\088\000\089\000\
\090\000\000\000\000\000\075\000\076\000\077\000\078\000\000\000\
\000\000\051\000\000\000\052\000\000\000\000\000\000\000\091\000\
\092\000\079\000\080\000\081\000\082\000\083\000\084\000\000\000\
\000\000\085\000\086\000\087\000\088\000\089\000\090\000\000\000\
\053\000\054\000\055\000\056\000\057\000\058\000\059\000\060\000\
\061\000\062\000\063\000\064\000\065\000\029\000\092\000\029\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\075\000\076\000\077\000\078\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\079\000\
\080\000\081\000\082\000\083\000\084\000\000\000\000\000\085\000\
\086\000\087\000\088\000\089\000\090\000"

let yycheck = "\004\000\
\000\000\066\000\001\000\008\000\009\000\007\001\050\000\009\001\
\079\001\162\000\163\000\008\001\001\000\010\001\001\001\001\001\
\008\001\079\001\010\001\070\001\051\000\023\001\027\000\028\000\
\029\000\000\000\179\000\001\001\093\000\004\001\005\001\065\001\
\066\001\070\001\001\001\007\001\061\001\009\001\009\001\011\001\
\193\000\016\001\007\001\196\000\012\001\013\001\009\001\052\000\
\053\000\054\000\055\000\056\000\057\000\058\000\059\000\060\000\
\061\000\062\000\063\000\064\000\065\000\050\000\067\000\094\000\
\051\001\051\001\010\001\012\001\001\001\074\000\075\000\076\000\
\077\000\078\000\079\000\080\000\081\000\082\000\083\000\084\000\
\085\000\086\000\087\000\088\000\089\000\090\000\091\000\092\000\
\055\001\056\001\095\000\096\000\013\001\009\001\079\001\062\001\
\063\001\064\001\129\000\009\001\067\001\068\001\069\001\075\001\
\076\001\077\001\078\001\079\001\002\001\003\001\004\001\005\001\
\079\001\030\001\046\001\047\001\048\001\049\001\050\001\008\001\
\079\001\008\001\016\001\167\000\051\001\008\001\001\001\132\000\
\070\001\134\000\001\001\175\000\013\001\008\001\178\000\010\001\
\061\001\012\001\013\001\013\001\072\001\073\001\071\001\010\001\
\001\001\002\001\003\001\079\001\043\001\051\001\043\001\008\001\
\007\001\010\001\198\000\012\001\013\001\043\001\010\001\164\000\
\017\001\018\001\019\001\020\001\021\001\079\001\043\001\024\001\
\025\001\026\001\027\001\028\001\029\001\013\001\070\001\079\001\
\001\001\008\001\167\000\001\001\055\001\225\000\187\000\227\000\
\189\000\051\001\175\000\044\001\045\001\178\000\051\001\061\001\
\067\001\043\001\043\001\070\001\001\001\010\001\055\001\001\001\
\012\001\008\001\010\001\208\000\008\001\210\000\012\001\001\001\
\001\001\198\000\067\001\001\001\001\001\070\001\001\001\001\001\
\001\001\001\001\001\001\001\001\001\001\226\000\001\001\001\001\
\001\001\008\001\134\000\010\001\233\000\012\001\013\001\001\001\
\008\001\001\001\001\001\181\000\225\000\234\000\227\000\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\008\001\255\255\
\010\001\255\255\012\001\013\001\255\255\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\255\255\044\001\024\001\025\001\
\026\001\027\001\028\001\029\001\255\255\255\255\255\255\255\255\
\055\001\255\255\255\255\002\001\003\001\004\001\005\001\255\255\
\255\255\255\255\044\001\045\001\067\001\255\255\255\255\070\001\
\255\255\016\001\017\001\018\001\019\001\055\001\021\001\255\255\
\255\255\255\255\255\255\043\001\001\001\002\001\003\001\004\001\
\005\001\067\001\255\255\008\001\070\001\010\001\255\255\012\001\
\013\001\255\255\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\255\255\255\255\024\001\025\001\026\001\027\001\028\001\
\029\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\055\001\056\001\255\255\255\255\255\255\044\001\
\045\001\062\001\063\001\064\001\255\255\255\255\067\001\068\001\
\069\001\255\255\055\001\255\255\001\001\002\001\003\001\004\001\
\005\001\255\255\079\001\008\001\255\255\010\001\067\001\012\001\
\013\001\070\001\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\255\255\255\255\024\001\025\001\026\001\027\001\028\001\
\029\001\255\255\255\255\002\001\003\001\004\001\005\001\255\255\
\255\255\002\001\003\001\004\001\005\001\255\255\255\255\044\001\
\045\001\016\001\017\001\018\001\019\001\020\001\021\001\016\001\
\017\001\018\001\055\001\255\255\001\001\002\001\003\001\255\255\
\255\255\255\255\255\255\008\001\255\255\010\001\067\001\012\001\
\013\001\070\001\255\255\255\255\017\001\018\001\019\001\020\001\
\021\001\255\255\255\255\024\001\025\001\026\001\027\001\028\001\
\029\001\255\255\255\255\255\255\255\255\255\255\255\255\002\001\
\003\001\004\001\005\001\255\255\255\255\255\255\255\255\044\001\
\045\001\255\255\255\255\255\255\001\001\016\001\017\001\018\001\
\019\001\255\255\055\001\008\001\001\001\010\001\255\255\012\001\
\013\001\255\255\255\255\008\001\255\255\010\001\067\001\012\001\
\013\001\070\001\255\255\255\255\017\001\018\001\019\001\020\001\
\021\001\255\255\255\255\024\001\025\001\026\001\027\001\028\001\
\029\001\255\255\255\255\255\255\255\255\255\255\255\255\044\001\
\045\001\255\255\255\255\255\255\255\255\255\255\255\255\044\001\
\045\001\255\255\055\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\055\001\255\255\001\001\255\255\067\001\255\255\
\255\255\070\001\255\255\008\001\255\255\010\001\067\001\012\001\
\013\001\070\001\255\255\255\255\017\001\018\001\019\001\020\001\
\021\001\255\255\255\255\024\001\025\001\026\001\027\001\028\001\
\029\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\044\001\
\045\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\001\001\255\255\055\001\255\255\255\255\255\255\255\255\008\001\
\255\255\010\001\255\255\012\001\013\001\255\255\067\001\255\255\
\255\255\070\001\019\001\020\001\021\001\255\255\255\255\024\001\
\025\001\026\001\027\001\028\001\029\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\044\001\045\001\255\255\255\255\255\255\
\001\001\255\255\255\255\255\255\255\255\255\255\055\001\008\001\
\255\255\010\001\255\255\012\001\013\001\255\255\255\255\255\255\
\255\255\255\255\067\001\020\001\021\001\070\001\255\255\024\001\
\025\001\026\001\027\001\028\001\029\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\044\001\045\001\255\255\255\255\255\255\
\001\001\255\255\255\255\255\255\255\255\255\255\055\001\008\001\
\255\255\010\001\255\255\012\001\013\001\255\255\255\255\255\255\
\255\255\255\255\067\001\020\001\255\255\070\001\255\255\024\001\
\025\001\026\001\027\001\028\001\029\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\044\001\045\001\255\255\255\255\255\255\
\001\001\255\255\255\255\255\255\255\255\255\255\055\001\008\001\
\001\001\010\001\255\255\012\001\013\001\255\255\255\255\008\001\
\255\255\010\001\067\001\012\001\013\001\070\001\255\255\024\001\
\025\001\026\001\027\001\028\001\029\001\255\255\255\255\024\001\
\025\001\026\001\027\001\028\001\029\001\255\255\255\255\255\255\
\255\255\255\255\255\255\044\001\045\001\255\255\255\255\255\255\
\255\255\255\255\255\255\044\001\045\001\255\255\055\001\255\255\
\001\001\255\255\255\255\255\255\255\255\255\255\055\001\008\001\
\001\001\010\001\067\001\012\001\013\001\070\001\255\255\008\001\
\255\255\010\001\067\001\012\001\013\001\070\001\255\255\024\001\
\025\001\026\001\027\001\028\001\029\001\255\255\255\255\024\001\
\025\001\026\001\027\001\028\001\029\001\255\255\255\255\255\255\
\255\255\255\255\255\255\044\001\045\001\255\255\255\255\255\255\
\255\255\255\255\255\255\044\001\045\001\255\255\055\001\255\255\
\001\001\255\255\255\255\255\255\255\255\255\255\055\001\008\001\
\001\001\010\001\067\001\012\001\013\001\070\001\255\255\008\001\
\255\255\010\001\067\001\012\001\013\001\070\001\255\255\024\001\
\025\001\026\001\027\001\028\001\029\001\255\255\255\255\024\001\
\025\001\026\001\027\001\028\001\029\001\255\255\255\255\255\255\
\255\255\255\255\255\255\044\001\045\001\255\255\255\255\255\255\
\255\255\255\255\255\255\044\001\045\001\255\255\055\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\055\001\255\255\
\255\255\255\255\067\001\255\255\255\255\070\001\002\001\003\001\
\004\001\005\001\067\001\255\255\255\255\070\001\255\255\255\255\
\255\255\255\255\255\255\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\255\255\255\255\024\001\025\001\026\001\027\001\
\028\001\029\001\255\255\255\255\002\001\003\001\004\001\005\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\044\001\045\001\016\001\017\001\018\001\019\001\020\001\021\001\
\255\255\255\255\024\001\025\001\026\001\027\001\028\001\029\001\
\255\255\255\255\002\001\003\001\004\001\005\001\255\255\255\255\
\255\255\255\255\070\001\255\255\255\255\255\255\044\001\045\001\
\016\001\017\001\018\001\019\001\020\001\021\001\255\255\255\255\
\024\001\025\001\026\001\027\001\028\001\029\001\255\255\255\255\
\002\001\003\001\004\001\005\001\255\255\255\255\255\255\255\255\
\070\001\255\255\255\255\255\255\044\001\045\001\016\001\017\001\
\018\001\019\001\020\001\021\001\255\255\255\255\024\001\025\001\
\026\001\027\001\028\001\029\001\255\255\255\255\002\001\003\001\
\004\001\005\001\255\255\255\255\255\255\255\255\070\001\255\255\
\255\255\255\255\044\001\045\001\016\001\017\001\018\001\019\001\
\020\001\021\001\255\255\255\255\024\001\025\001\026\001\027\001\
\028\001\029\001\255\255\255\255\002\001\003\001\004\001\005\001\
\255\255\255\255\255\255\255\255\070\001\255\255\255\255\255\255\
\044\001\045\001\016\001\017\001\018\001\019\001\020\001\021\001\
\255\255\255\255\024\001\025\001\026\001\027\001\028\001\029\001\
\255\255\255\255\255\255\002\001\003\001\004\001\005\001\255\255\
\255\255\255\255\070\001\010\001\255\255\255\255\044\001\045\001\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001\255\255\
\255\255\024\001\025\001\026\001\027\001\028\001\029\001\255\255\
\255\255\002\001\003\001\004\001\005\001\255\255\255\255\255\255\
\070\001\255\255\255\255\012\001\255\255\044\001\045\001\016\001\
\017\001\018\001\019\001\020\001\021\001\255\255\255\255\024\001\
\025\001\026\001\027\001\028\001\029\001\255\255\255\255\002\001\
\003\001\004\001\005\001\255\255\067\001\255\255\255\255\255\255\
\255\255\255\255\013\001\044\001\045\001\016\001\017\001\018\001\
\019\001\020\001\021\001\255\255\255\255\024\001\025\001\026\001\
\027\001\028\001\029\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\067\001\255\255\255\255\255\255\255\255\255\255\
\255\255\044\001\045\001\002\001\003\001\004\001\005\001\255\255\
\255\255\255\255\255\255\255\255\055\001\255\255\255\255\255\255\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001\255\255\
\255\255\024\001\025\001\026\001\027\001\028\001\029\001\255\255\
\255\255\255\255\255\255\002\001\003\001\004\001\005\001\255\255\
\255\255\008\001\255\255\255\255\255\255\044\001\045\001\255\255\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001\255\255\
\055\001\024\001\025\001\026\001\027\001\028\001\029\001\255\255\
\255\255\002\001\003\001\004\001\005\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\013\001\044\001\045\001\016\001\
\017\001\018\001\019\001\020\001\021\001\255\255\255\255\024\001\
\025\001\026\001\027\001\028\001\029\001\255\255\255\255\002\001\
\003\001\004\001\005\001\255\255\255\255\255\255\255\255\010\001\
\255\255\255\255\255\255\044\001\045\001\016\001\017\001\018\001\
\019\001\020\001\021\001\255\255\255\255\024\001\025\001\026\001\
\027\001\028\001\029\001\255\255\255\255\002\001\003\001\004\001\
\005\001\255\255\255\255\255\255\255\255\010\001\255\255\255\255\
\255\255\044\001\045\001\016\001\017\001\018\001\019\001\020\001\
\021\001\255\255\255\255\024\001\025\001\026\001\027\001\028\001\
\029\001\255\255\255\255\002\001\003\001\004\001\005\001\255\255\
\255\255\255\255\255\255\010\001\255\255\255\255\255\255\044\001\
\045\001\016\001\017\001\018\001\019\001\020\001\021\001\255\255\
\255\255\024\001\025\001\026\001\027\001\028\001\029\001\255\255\
\255\255\002\001\003\001\004\001\005\001\255\255\255\255\255\255\
\255\255\010\001\255\255\255\255\255\255\044\001\045\001\016\001\
\017\001\018\001\019\001\020\001\021\001\255\255\255\255\024\001\
\025\001\026\001\027\001\028\001\029\001\255\255\255\255\002\001\
\003\001\004\001\005\001\255\255\255\255\255\255\255\255\255\255\
\255\255\012\001\255\255\044\001\045\001\016\001\017\001\018\001\
\019\001\020\001\021\001\255\255\255\255\024\001\025\001\026\001\
\027\001\028\001\029\001\255\255\255\255\002\001\003\001\004\001\
\005\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\044\001\045\001\016\001\017\001\018\001\019\001\020\001\
\021\001\255\255\255\255\024\001\025\001\026\001\027\001\028\001\
\029\001\255\255\255\255\002\001\003\001\004\001\005\001\255\255\
\255\255\007\001\255\255\009\001\255\255\255\255\255\255\044\001\
\045\001\016\001\017\001\018\001\019\001\020\001\021\001\255\255\
\255\255\024\001\025\001\026\001\027\001\028\001\029\001\255\255\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\007\001\045\001\009\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\002\001\003\001\004\001\005\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\255\255\255\255\024\001\
\025\001\026\001\027\001\028\001\029\001"

let yynames_const = "\
  NEWLINE\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  DOT\000\
  LPAREN\000\
  RPAREN\000\
  LBRACK\000\
  RBRACK\000\
  LCURL\000\
  RCURL\000\
  COMMA\000\
  EXPONENT\000\
  FLOORDIVIDE\000\
  MOD\000\
  LSHIFT\000\
  RSHIFT\000\
  BITAND\000\
  BITOR\000\
  BITXOR\000\
  BITNOT\000\
  WALRUS\000\
  GT\000\
  LT\000\
  GEQ\000\
  LEQ\000\
  EQ\000\
  NEQ\000\
  ASSIGN\000\
  PLUSASSIGN\000\
  MINUSASSIGN\000\
  TIMESASSIGN\000\
  DIVIDEASSIGN\000\
  MODASSIGN\000\
  FLOORDIVASSIGN\000\
  EXPASSIGN\000\
  ANDASSIGN\000\
  ORASSIGN\000\
  XORASSIGN\000\
  RSHIFTASSIGN\000\
  LSHIFTASSIGN\000\
  DEDENT\000\
  OR\000\
  AND\000\
  FLOAT\000\
  BOOL\000\
  STR\000\
  INT\000\
  VOID\000\
  INDENT\000\
  NONE\000\
  FALSE\000\
  TRUE\000\
  FOR\000\
  WHILE\000\
  FROM\000\
  DEL\000\
  NOT\000\
  IS\000\
  IN\000\
  PASS\000\
  CONTINUE\000\
  BREAK\000\
  ELIF\000\
  ELSE\000\
  IF\000\
  RETURN\000\
  DEF\000\
  COLON\000\
  ARROW\000\
  LIST\000\
  DICT\000\
  IMPLEMENTS\000\
  EOF\000\
  "

let yynames_block = "\
  BOOLLIT\000\
  INTLIT\000\
  FLOATLIT\000\
  STRINGLIT\000\
  VARIABLE\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'block_list) in
    Obj.repr(
# 45 "parser.mly"
                   ( { body = _1 } )
# 805 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'block) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'newline_list) in
    Obj.repr(
# 49 "parser.mly"
                       ([_1])
# 813 "parser.ml"
               : 'block_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'block) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'newline_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'block_list) in
    Obj.repr(
# 50 "parser.mly"
                                     ( _1 :: _3  )
# 822 "parser.ml"
               : 'block_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 54 "parser.mly"
         ()
# 828 "parser.ml"
               : 'newline_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'newline_list) in
    Obj.repr(
# 55 "parser.mly"
                        ()
# 835 "parser.ml"
               : 'newline_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'declaration) in
    Obj.repr(
# 58 "parser.mly"
                            ( _1        )
# 842 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assignment) in
    Obj.repr(
# 59 "parser.mly"
                            ( _1        )
# 849 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'while_loop) in
    Obj.repr(
# 60 "parser.mly"
                            ( _1        )
# 856 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
                            ( Break     )
# 862 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
                            ( Continue  )
# 868 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "parser.mly"
                            ( Pass      )
# 874 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'function_definition) in
    Obj.repr(
# 64 "parser.mly"
                            ( _1        )
# 881 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'function_block_call) in
    Obj.repr(
# 65 "parser.mly"
                            ( _1        )
# 888 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'return_exit) in
    Obj.repr(
# 66 "parser.mly"
                            ( _1        )
# 895 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'return_val) in
    Obj.repr(
# 67 "parser.mly"
                            ( _1        )
# 902 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'conditional) in
    Obj.repr(
# 68 "parser.mly"
                            ( _1        )
# 909 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'for_loop) in
    Obj.repr(
# 69 "parser.mly"
                            ( _1        )
# 916 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
           ( ReturnVoid )
# 922 "parser.ml"
               : 'return_exit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 76 "parser.mly"
                ( ReturnVal(_2) )
# 929 "parser.ml"
               : 'return_val))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typename) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 79 "parser.mly"
                                        ( VarDec(_3, Var(_1), _5) )
# 938 "parser.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    Obj.repr(
# 82 "parser.mly"
                                                    ( TypeVariable("int")   )
# 944 "parser.ml"
               : 'typename))
; (fun __caml_parser_env ->
    Obj.repr(
# 83 "parser.mly"
                                                    ( TypeVariable("bool")  )
# 950 "parser.ml"
               : 'typename))
; (fun __caml_parser_env ->
    Obj.repr(
# 84 "parser.mly"
                                                    ( TypeVariable("float") )
# 956 "parser.ml"
               : 'typename))
; (fun __caml_parser_env ->
    Obj.repr(
# 85 "parser.mly"
                                                    ( TypeVariable("str")   )
# 962 "parser.ml"
               : 'typename))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "parser.mly"
                                                    ( TypeVariable("void")  )
# 968 "parser.ml"
               : 'typename))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 87 "parser.mly"
                                                    ( TypeVariable(_1)      )
# 975 "parser.ml"
               : 'typename))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typename) in
    Obj.repr(
# 88 "parser.mly"
                                                    ( List(_3)              )
# 982 "parser.ml"
               : 'typename))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'typename) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'typename) in
    Obj.repr(
# 89 "parser.mly"
                                                    ( Dict(_3, _5)          )
# 990 "parser.ml"
               : 'typename))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 92 "parser.mly"
                                    ( Var(_1)           )
# 997 "parser.ml"
               : 'variable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 93 "parser.mly"
                                    ( VarIndex(_1, _3)  )
# 1005 "parser.ml"
               : 'variable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
                                    ( BlockAssign(_1, IdentityAssign, _3) )
# 1013 "parser.ml"
               : 'assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                                    ( BlockAssign(_1, PlusAssign,     _3) )
# 1021 "parser.ml"
               : 'assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
                                    ( BlockAssign(_1, MinusAssign,    _3) )
# 1029 "parser.ml"
               : 'assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 99 "parser.mly"
                                    ( BlockAssign(_1, TimesAssign,    _3) )
# 1037 "parser.ml"
               : 'assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
                                    ( BlockAssign(_1, ExpAssign,      _3) )
# 1045 "parser.ml"
               : 'assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 101 "parser.mly"
                                    ( BlockAssign(_1, DivideAssign,   _3) )
# 1053 "parser.ml"
               : 'assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                                    ( BlockAssign(_1, FloorDivAssign, _3) )
# 1061 "parser.ml"
               : 'assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "parser.mly"
                                    ( BlockAssign(_1, ModAssign,      _3) )
# 1069 "parser.ml"
               : 'assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "parser.mly"
                                    ( BlockAssign(_1, AndAssign,      _3) )
# 1077 "parser.ml"
               : 'assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                                    ( BlockAssign(_1, OrAssign,       _3) )
# 1085 "parser.ml"
               : 'assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                                    ( BlockAssign(_1, XorAssign,      _3) )
# 1093 "parser.ml"
               : 'assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                                    ( BlockAssign(_1, RShiftAssign,   _3) )
# 1101 "parser.ml"
               : 'assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                                    ( BlockAssign(_1, LShiftAssign,   _3) )
# 1109 "parser.ml"
               : 'assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 111 "parser.mly"
                                    ( BoolLit(_1)                   )
# 1116 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 112 "parser.mly"
                                    ( IntLit(_1)                    )
# 1123 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 113 "parser.mly"
                                    ( FloatLit(_1)                  )
# 1130 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 114 "parser.mly"
                                    ( StringLit(_1)                 )
# 1137 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'variable) in
    Obj.repr(
# 115 "parser.mly"
                                    ( VarExpr(_1)                   )
# 1144 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'list) in
    Obj.repr(
# 116 "parser.mly"
                                    ( _1                            )
# 1151 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dict) in
    Obj.repr(
# 117 "parser.mly"
                                    ( _1                            )
# 1158 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                                    ( IndexingStringLit(_1, _3) 	)
# 1166 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                                    ( IndexingExprList(_1, _3) 		)
# 1174 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                                    ( Binop(_1, Add, _3)            )
# 1182 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                                    ( Binop(_1, Sub, _3)            )
# 1190 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                                    ( Binop(_1, Mult, _3)            )
# 1198 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                                    ( Binop(_1, Div, _3)            )
# 1206 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                                    ( Binop(_1, Eq, _3)             )
# 1214 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                                    ( Binop(_1, Neq, _3)            )
# 1222 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                                    ( Binop(_1, Geq, _3)            )
# 1230 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                                    ( Binop(_1, Leq, _3)            )
# 1238 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                                    ( Binop(_1, More, _3)           )
# 1246 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                                    ( Binop(_1, Less, _3)           )
# 1254 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                                    ( Binop(_1, And, _3)            )
# 1262 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                                    ( Binop(_1, Or, _3)             )
# 1270 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                                    ( Binop(_1, BitAnd, _3)         )
# 1278 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
                                    ( Binop(_1, BitOr, _3)          )
# 1286 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                                    ( Binop(_1, LShift, _3)         )
# 1294 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 135 "parser.mly"
                                    ( Binop(_1, RShift, _3)  	    )
# 1302 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 136 "parser.mly"
                                    ( Binop(_1, Mod, _3)            )
# 1310 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 137 "parser.mly"
                                    ( Binop(_1, Less, _3)           )
# 1318 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 138 "parser.mly"
                                    ( Walrus(_1, _3)                )
# 1326 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 139 "parser.mly"
                                    ( _2                            )
# 1333 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'function_call) in
    Obj.repr(
# 140 "parser.mly"
                                    ( _1                            )
# 1340 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'list_contents) in
    Obj.repr(
# 143 "parser.mly"
                                         ( FuncCall(_1, _3)      )
# 1348 "parser.ml"
               : 'function_call))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'list_contents) in
    Obj.repr(
# 146 "parser.mly"
                                         ( FuncBlockCall(_1, _3) )
# 1356 "parser.ml"
               : 'function_block_call))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'list_literal) in
    Obj.repr(
# 149 "parser.mly"
                         ( _1    )
# 1363 "parser.ml"
               : 'list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'list_comprehension) in
    Obj.repr(
# 150 "parser.mly"
                         ( _1    )
# 1370 "parser.ml"
               : 'list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 153 "parser.mly"
                                                     ( ListCompUnconditional(_2, Var(_4), _6)    )
# 1379 "parser.ml"
               : 'list_comprehension))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 154 "parser.mly"
                                                      ( ListCompConditional(_2, Var(_4), _6, _8)  )
# 1389 "parser.ml"
               : 'list_comprehension))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 11 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 9 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _9 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _12 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 157 "parser.mly"
                                                                                         ( DictCompUnconditional(_2, _4, Var(_7), Var(_9), _12)  )
# 1400 "parser.ml"
               : 'dict_comprehension))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 13 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 11 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _9 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _12 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _14 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 158 "parser.mly"
                                                                                          ( DictCompConditional(_2, _4, Var(_7), Var(_9), _12, _14)   )
# 1412 "parser.ml"
               : 'dict_comprehension))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'list_contents) in
    Obj.repr(
# 161 "parser.mly"
                             ( List(_2) )
# 1419 "parser.ml"
               : 'list_literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 164 "parser.mly"
                             ( []        )
# 1425 "parser.ml"
               : 'list_contents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 165 "parser.mly"
                             ( [_1]      )
# 1432 "parser.ml"
               : 'list_contents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'list_contents) in
    Obj.repr(
# 166 "parser.mly"
                             ( _1 :: _3  )
# 1440 "parser.ml"
               : 'list_contents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dict_literal) in
    Obj.repr(
# 169 "parser.mly"
                         ( _1    )
# 1447 "parser.ml"
               : 'dict))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dict_comprehension) in
    Obj.repr(
# 170 "parser.mly"
                         ( _1    )
# 1454 "parser.ml"
               : 'dict))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'dict_contents) in
    Obj.repr(
# 174 "parser.mly"
                             ( Dict(_2)    )
# 1461 "parser.ml"
               : 'dict_literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 177 "parser.mly"
                                     ( []        )
# 1467 "parser.ml"
               : 'dict_contents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dict_element) in
    Obj.repr(
# 178 "parser.mly"
                                     ( [_1]      )
# 1474 "parser.ml"
               : 'dict_contents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dict_element) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dict_contents) in
    Obj.repr(
# 179 "parser.mly"
                                     ( _1 :: _3  )
# 1482 "parser.ml"
               : 'dict_contents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 182 "parser.mly"
                         ( (_1, _3)  )
# 1490 "parser.ml"
               : 'dict_element))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'newline_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'block_list) in
    Obj.repr(
# 186 "parser.mly"
                                                         ( While(_2, _6) )
# 1499 "parser.ml"
               : 'while_loop))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'block_list) in
    Obj.repr(
# 189 "parser.mly"
                                                               ( For(Var(_2), _4, _8)  )
# 1508 "parser.ml"
               : 'for_loop))
; (fun __caml_parser_env ->
    Obj.repr(
# 192 "parser.mly"
                                 ( []            )
# 1514 "parser.ml"
               : 'variable_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 193 "parser.mly"
                                 ( [Var(_1)]     )
# 1521 "parser.ml"
               : 'variable_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'variable_list) in
    Obj.repr(
# 194 "parser.mly"
                                 ( Var(_1) :: _3 )
# 1529 "parser.ml"
               : 'variable_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 197 "parser.mly"
                                                     ( []        )
# 1535 "parser.ml"
               : 'func_signature_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'func_signature) in
    Obj.repr(
# 198 "parser.mly"
                                                     ( [_1]      )
# 1542 "parser.ml"
               : 'func_signature_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'func_signature) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'newline_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'func_signature_list) in
    Obj.repr(
# 199 "parser.mly"
                                                     ( _1 :: _3  )
# 1551 "parser.ml"
               : 'func_signature_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'args_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'typename) in
    Obj.repr(
# 202 "parser.mly"
                                                     ( (Var(_2), _4, _7) )
# 1560 "parser.ml"
               : 'func_signature))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'func_signature) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'newline_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'block_list) in
    Obj.repr(
# 205 "parser.mly"
                                                            ( FunctionDefinition(_1, _5) )
# 1569 "parser.ml"
               : 'function_definition))
; (fun __caml_parser_env ->
    Obj.repr(
# 208 "parser.mly"
                         ( []        )
# 1575 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arg) in
    Obj.repr(
# 209 "parser.mly"
                         ( [_1]      )
# 1582 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arg) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 210 "parser.mly"
                         ( _1 :: _3  )
# 1590 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typename) in
    Obj.repr(
# 213 "parser.mly"
                         ( (Var(_1), _3) )
# 1598 "parser.ml"
               : 'arg))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'block_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'elif) in
    Obj.repr(
# 216 "parser.mly"
                                                     ( IfNonEnd(_2, _6, _8)  )
# 1607 "parser.ml"
               : 'conditional))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'block_list) in
    Obj.repr(
# 217 "parser.mly"
                                                     ( IfEnd(_2, _6)         )
# 1615 "parser.ml"
               : 'conditional))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'block_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'elif) in
    Obj.repr(
# 220 "parser.mly"
                                                         ( ElifNonEnd(_2, _6, _8)    )
# 1624 "parser.ml"
               : 'elif))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'block_list) in
    Obj.repr(
# 221 "parser.mly"
                                                         ( ElifEnd(_2, _6)           )
# 1632 "parser.ml"
               : 'elif))
; (fun __caml_parser_env ->
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'block_list) in
    Obj.repr(
# 222 "parser.mly"
                                                         ( ElseEnd(_5)               )
# 1639 "parser.ml"
               : 'elif))
(* Entry program_rule *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program_rule (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
