Going to try defining the basic cfg for Py+^n

Note: I'm pretty sure Py+^n can't be fully context free, even for a syntax parser, because of whitespace. I don't think there is a way to specify the indentation of an entire block of code only using a CFG. So we might need a seperate parsing strategy for whitespace specifically.

IMPORT -> import CHARSTRING

LITERAL -> NUM|STRINGLITERAL

NUM -> INT|DECIMAL

INT -> DIGITSTRING|-DIGITSTRNG

DECIMAL -> INT.DIGITSTRING

DIGITSTRING -> (0+1+2+3+4+5+6+7+8+9)*

CHARSTRING -> CHAR*

STRINGLITERAL -> "CHAR*"

CHAR-> sigma

#considering function, class and interface definitions as one complete statement
STATEMENT -> ASSIGNMENT|DECLARATION|FUNCTIONCALL|RETURN|IMPORT

DECLARATION -> TYPE: CHARSTRING EXPRESSION

TYPE -> CHARSTRING

EXPRESSION -> LITERAL|FUNCTIONCALL|VARIABLE

FUNCTIONCALL -> CHARSTRING(ARGS)

ARGS-> ARG, ARG | ARG

ARG -> TYPE: NAME
